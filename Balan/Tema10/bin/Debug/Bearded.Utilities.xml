<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bearded.Utilities</name>
    </assembly>
    <members>
        <member name="T:Bearded.Utilities.Algorithms.HungarianAlgorithm">
            <summary>
            The Hungarian algorithm is a cubic algorithm that solves the assignment problem.
            The algorithm calculates a maximum matching between workers and jobs, while minimising the total cost.
            </summary>
            <remarks>The original implementation was by Kevin L. Stern.</remarks>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.Run(System.Single[0:,0:])">
            <summary>
            Evaluates a minimal cost matching using the given cost matrix.
            </summary>
            <param name="costMatrix">A matrix of costs of assigning jobs to workers.</param>
            <returns>The minimal cost matching based on the specified cost matrix. A value of -1 means the worker is not assigned.</returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.Run``2(``0[],``1[],System.Func{``0,``1,System.Single})">
            <summary>
            Evaluates a minimal cost matching using the given metric.
            </summary>
            <typeparam name="TWorker">The type representing the workers.</typeparam>
            <typeparam name="TJob">The type representing the jobs.</typeparam>
            <param name="workers">The elements representing the workers.</param>
            <param name="jobs">The elements representing the jobs.</param>
            <param name="getCost">A function that calculates the cost of assigning a job to a worker.</param>
            <returns>The minimal cost matching based on the specified metric. A value of -1 means the worker is not assigned.</returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.Run(OpenTK.Vector2[],OpenTK.Vector2[])">
            <summary>
            Evaluates a minimal cost matching on two-dimensional vectors using the least-squares metric.
            </summary>
            <param name="from">The source vectors.</param>
            <param name="to">The destination vectors.</param>
            <returns>The minimal cost matching based on the least-squares metric. A value of -1 means the source vector is not assigned.</returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.Run(OpenTK.Vector3[],OpenTK.Vector3[])">
            <summary>
            Evaluates a minimal cost matching on two-dimensional vectors using the least-squares metric.
            </summary>
            <param name="from">The source vectors.</param>
            <param name="to">The destination vectors.</param>
            <returns>The minimal cost matching based on the least-squares metric. A value of -1 means the source vector is not assigned.</returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.#ctor(System.Single[0:,0:])">
            <summary>
            Construct an instance of the algorithm.
            </summary>
            <param name="costMatrix">the cost matrix, where matrix[i][j] holds the cost of assigning worker i to job j, for all i, j.</param>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.execute">
            <summary>
            Executes the algorithm.
            </summary>
            <returns>The minimum cost matching of workers to jobs based upon the provided cost matrix. A matching value of -1 indicates that the corresponding worker is unassigned.</returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.reduce">
            <summary>
            Reduces the cost matrix by subtracting the smallest element of each row from
            all elements of the row as well as the smallest element of each column from
            all elements of the column.
            Note that an optimal assignment for a reduced cost matrix is optimal for the
            original cost matrix.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.computeInitialFeasibleSolution">
            <summary>
            Compute an initial feasible solution by assigning zero labels to the workers and by assigning to each job a label equal to the minimum cost among its incident edges.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.greedyMatch">
            <summary>
            Greedily find a matching to start the algorithm with.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.initializePhase(System.Int32)">
            <summary>
            Initializes the next phase of the algorithm by clearing the committed
            workers and jobs sets and by initializing the slack arrays to the values
            corresponding to the specified root worker.
            </summary>
            <param name="s">The worker at which to root the next phase.</param>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.executePhase">
            <summary>
            Execute a single phase of the algorithm. A phase of the Hungarian algorithm
            consists of building a set of committed workers and a set of committed jobs
            from a root unmatched worker by following alternating unmatched/matched
            zero-slack edges. If an unmatched job is encountered, then an augmenting
            path has been found and the matching is grown. If the connected zero-slack
            edges have been exhausted, the labels of committed workers are increased by
            the minimum slack among committed workers and non-committed jobs to create
            more zero-slack edges (the labels of committed jobs are simultaneously
            decreased by the same amount in order to maintain a feasible labeling).
            </summary>
            <remarks>
            The runtime of a single phase of the algorithm is O(n^2), where n is the
            dimension of the internal square cost matrix, since each edge is visited at
            most once and since increasing the labeling is accomplished in time O(n) by
            maintaining the minimum slack values among non-committed jobs. When a phase
            completes, the matching will have increased in size.
            </remarks>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.firstUnmatchedSource">
            <summary>
            Returns the first unmatched source (or dim if none).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.match(System.Int32,System.Int32)">
            <summary>
            Matches source s to destination t.
            </summary>
            <param name="s"></param>
            <param name="t"></param>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.HungarianAlgorithm.updateLabeling(System.Single)">
            <summary>
            Updates labels with the specified slack by adding the slack value for
            committed workers and by subtracting the slack value for committed jobs. In
            addition, update the minimum slack values appropriately.
            </summary>
            <param name="slack"></param>
        </member>
        <member name="T:Bearded.Utilities.Algorithms.BinPacking">
            <summary>
            This class contains the functionality to efficiently pack a list of rectangles into one larger rectangle.
            It tries to pack them tightly and minimizes wasted space in the containing rectangle.
            The result is not guaranteed to be optimal.
            
            The algorithm implemented is an almost 1:1 translation of the Binary Tree Bin Packing Algorithm by
            Jake Gordon: http://codeincomplete.com/posts/2011/5/7/bin_packing/
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Algorithms.BinPacking.Rectangle`1">
            <summary>
            Input rectangle type for the packing algorithm.
            </summary>
            <typeparam name="T">Type of custom user data associated with the rectangle.</typeparam>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Rectangle`1.Value">
            <summary>
            Custom user data associated with the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Rectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Rectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.BinPacking.Rectangle`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the rectangle class.
            </summary>
            <param name="value">Custom user data associated with the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="T:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1">
            <summary>
            Output rectangle type of the packing algorithm.
            </summary>
            <typeparam name="T">Type of custom user data associated with the rectangle.</typeparam>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1.X">
            <summary>
            Lower X Coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1.Y">
            <summary>
            Lower Y Coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1.Value">
            <summary>
            Custom user data associated with the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1.Width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.PositionedRectangle`1.Height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Algorithms.BinPacking.Result`1">
            <summary>
            Result container of the rectangle packing algorithm.
            </summary>
            <typeparam name="T">Type of custom user data associated with the rectangle.</typeparam>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.Rectangles">
            <summary>
            The list of packed rectangles.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.Width">
            <summary>
            The width of the containing rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.Height">
            <summary>
            The height of the containing rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.EmptyPixels">
            <summary>
            Number of pixels or grid cells of the containing rectangle wasted with this packing.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.Area">
            <summary>
            The total area of the containing rectangle (Width * Height).
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Algorithms.BinPacking.Result`1.Filled">
            <summary>
            The fraction of pixels or grid cells of the containing rectangle filled by the packed rectangles.
            Maximum is 1 for a perfect filling.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Algorithms.BinPacking.Pack``1(System.Collections.Generic.IEnumerable{Bearded.Utilities.Algorithms.BinPacking.Rectangle{``0}},System.Boolean)">
            <summary>
            Packs a list of rectangles together trying to minimize the size of the containing rectangle.
            </summary>
            <typeparam name="T">Type of custom user data associated with the rectangle.</typeparam>
            <param name="rectangles">The rectangles to pack.</param>
            <param name="tryMultipleHeuristics">
            If true, the algorithm is run for multiple heuristics and returns the best result.
            If false, it is only run for one heuristic, packing rectangles in order of decreasing area, which empirically works well.</param>
            <returns>
            Null, if the given list of rectangles is empty.
            Otherwise, an object containing the packed rectangles and some additional information.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is null.</exception>
        </member>
        <member name="T:Bearded.Utilities.Algorithms.BinPacking.Tree`1">
            <summary>
            Implementation of the algorithm.
            For details see http://codeincomplete.com/posts/2011/5/7/bin_packing/
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.PrefixTrie">
            <summary>
            An immutable prefix trie, useful for extending prefixes and getting all strings with a given prefix.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.PrefixTrie.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.PrefixTrie.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initialises a new prefix trie from a sequence of strings.
            Duplicate and null strings and will be ignored.
            </summary>
            <param name="values">The strings to build the trie from.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.Contains(System.String)">
            <summary>
            Determines whether the prefix tree contains a specific string.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.AllKeys(System.String)">
            <summary>
            Returns all contained strings with a given prefix.
            </summary>
            <returns>Empty sequence if prefix is not contained in tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null.</exception>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.ExtendPrefix(System.String)">
            <summary>
            Returns the maximum prefix that prefixes the same set of strings are the given one.
            </summary>
            <returns>Null if prefix is not contained in tree.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null.</exception>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.Add(System.String)">
            <summary>
            Not implemented. Will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.Remove(System.String)">
            <summary>
            Not implemented. Will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PrefixTrie.Clear">
            <summary>
            Not implemented. Will throw <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.DeletableObjectListEnumerator`1">
            <summary>
            Enumerator for deletable object list.
            Kept internal to hide implementation.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.IDeletable">
            <summary>
            An interface for objects that can be deleted, used for automatic deletion from DeletableObjectList.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.IDeletable.Deleted">
            <summary>
            Whether the object was deleted. This will cause it to be removed from all deletable object lists it is contained in.
            Once this returns true, it should never return false afterwards. Otherwise integrity of lists can not be guarnateed.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedList`1">
            <summary>
            A generic linked list that can be modified while it is being enumerated.
            Unless otherwise specified, all operations on this list, including removal by node, run in constant time.
            This list is not threadsafe.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.MutableLinkedList`1.First">
            <summary>
            Gets the first node in the linked list. Null if empty.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.MutableLinkedList`1.Last">
            <summary>
            Gets the last node in the linked list. Null if empty.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.MutableLinkedList`1.Count">
            <summary>
            Gets the number of elements in the list.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.#ctor">
            <summary>
            Instantiates a new instance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.Add(`0)">
            <summary>
            Adds an item to the linked list. The node used to store the item is returned.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.Add(Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Adds a linked list node to this list.
            If the node is already in another list, an exception is thrown.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.Remove(`0)">
            <summary>
            Tries to return the first occurrence of an item from the list.
            Returns true if it found and removed the item or false if the item is not in the list.
            </summary>
            <remarks>This method takes O(Count) time and its use is discouraged.</remarks>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.Remove(Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Removes the specified node from the list.
            Throws an exception if the given node is not in the list.
            </summary>
            <param name="node">The node to remove.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.AddBefore(Bearded.Utilities.Collections.MutableLinkedListNode{`0},Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Adds a given linked list node before another one already in this list.
            This will throw an exception if the node is already in another list, of if the node to add before is null, or not in this list.
            </summary>
            <param name="newNode">The node to add and insert.</param>
            <param name="beforeThis">The node to insert before.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.InsertBefore(Bearded.Utilities.Collections.MutableLinkedListNode{`0},Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Inserts a node before another node in the list.
            The given nodes must both be in the list, and the node to insert must be the last one in it.
            Otherwise an exception is thrown.
            </summary>
            <param name="node">The node to insert.</param>
            <param name="beforeThis">The node to insert before.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedListEnumerator`1">
            <summary>
            Enumerator for mutable linked lists.
            Kept internal to hide implementation.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedListItem`1">
            <summary>
            This type can be used to have a class be both the value as well as the node in a linked list to prevent unneeded allocations.
            Usage:
            MyClass : MutableLinkedListItem&lt;MyClass&gt;
            MutableLinkedList&lt;MyClass&gt;
            Make sure you add this as node and not as item to the linked list to prevent creation of the node wrapper.
            </summary>
            <typeparam name="TMe">The type of the inheriting class.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedListItem`2">
            <summary>
            This type can be used to have a class be both the value as well as the node in a linked list, mixed with actual nodes.
            Usage:
            MyClass : MutableLinkedListItem&lt;MyClass, MyInterface&gt;
            MutableLinkedList&lt;MyInterface&gt;
            Make sure you add this as node and not as item to the linked list to prevent creation of the node wrapper.
            </summary>
            <typeparam name="TMe">The type of the inheriting class.</typeparam>
            <typeparam name="TInterface">The type of the lists interface.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedListNode">
            <summary>
            Static class to initialise new mutable linked list nodes.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedListNode.For``1(``0)">
            <summary>
            Returns a new mutable linked list node for the given value.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.MutableLinkedListNode`1">
            <summary>
            A node for mutable linked lists.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.MutableLinkedListNode`1.Value">
            <summary>
            The value stored in the node.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.MutableLinkedListNode`1.List">
            <summary>
            The list the node is part of.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedListNode`1.AddToList(Bearded.Utilities.Collections.MutableLinkedList{`0})">
            <summary>
            Adds this node to a given list.
            </summary>
            <param name="list">The list to add the node to.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedListNode`1.AddToListBefore(Bearded.Utilities.Collections.MutableLinkedList{`0},Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Adds this node to a given list before another node.
            </summary>
            <param name="list">The list to add the node to.</param>
            <param name="beforeThis">The node to add this before.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedListNode`1.InsertBefore(Bearded.Utilities.Collections.MutableLinkedListNode{`0})">
            <summary>
            Insert this node before another on.
            Both nodes must be in the same list, and this node must be the last on in the list.
            </summary>
            <param name="beforeThis">The node to add this before.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.MutableLinkedListNode`1.RemoveFromList">
            <summary>
            Removes this node from the list it is in.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Collections.PriorityQueue`2">
            <summary>
            A priority queue that is implemented with a binary min-heap.
            </summary>
            <typeparam name="TPriority"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.#ctor">
            <summary>
            Creates a new instance of a priority queue.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a priority queue with the specified initial capacity.
            </summary>
            <param name="capacity">Initial capacity of the priority queue.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a new instance of a priority queue with the specified initial data.
            </summary>
            <param name="data">Initial data to fill the priority queue with.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.DecreasePriority(`1,`0)">
            <summary>
            Decreases the priority of the specified element [O(log n)].
            </summary>
            <param name="value">The element that should change.</param>
            <param name="newPriority">The new priority of the element.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.Clear">
            <summary>
            Empties the priority queue.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.add(`0,`1)">
            <summary>
            Adds a new element to the end of the tree.
            </summary>
            <param name="priority">The priority of the new element.</param>
            <param name="value">The element itself.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the tree.
            </summary>
            <param name="i1">The index of the first element.</param>
            <param name="i2">The index of the second element.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.PriorityQueue`2.reset(System.Int32)">
            <summary>
            Removes an element from the tree, resetting its value to the default state.
            </summary>
            <param name="i">The index of the element to be removed.</param>
        </member>
        <member name="T:Bearded.Utilities.Collections.StaticPriorityQueue`2">
            <summary>
            A priority queue that is implemented with a binary min-heap and does not support the updating of priorities.
            </summary>
            <typeparam name="TPriority"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:Bearded.Utilities.Collections.StaticPriorityQueue`2.data">
            <summary>
            Array-representation of the entire heap.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.StaticPriorityQueue`2.Count">
            <summary>
            The amount of elements the tree contains.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.#ctor">
            <summary>
            Creates a new instance of a static priority queue.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a static priority queue with the specified initial capacity.
            </summary>
            <param name="capacity">Initial capacity of the priority queue.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Creates a new instance of a static priority queue containing the initial data.
            </summary>
            <param name="data">Initial data to fill the queue with.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Adds a new element to the tree [O(log n)].
            </summary>
            <param name="priority">The priority of the new element.</param>
            <param name="value">The element itself.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.Peek">
            <summary>
            Returns the element with the lowest priority from the tree without removing it [O(1)].
            </summary>
            <returns>The element with the lowest priority.</returns>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.Dequeue">
            <summary>
            Dequeues the element with the lowest priority from the tree [O(log n)].
            </summary>
            <returns>The element with the lowest priority.</returns>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.Clear">
            <summary>
            Empties the priority queue.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.cascadeUp(System.Int32)">
            <summary>
            Cascades the changes upwards in the tree starting from the specified index [O(log n)].
            </summary>
            <param name="i">The index at which the heap property might be violated.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.cascadeDown(System.Int32)">
            <summary>
            Cascades the changes downwards in the tree starting from the specified index [O(log n)].
            </summary>
            <param name="i">The index at which the heap proprty might be violated.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.add(`0,`1)">
            <summary>
            Adds a new element to the end of the tree.
            </summary>
            <param name="priority">The priority of the new element.</param>
            <param name="value">The element itself.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the tree.
            </summary>
            <param name="i1">The index of the first element.</param>
            <param name="i2">The index of the second element.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.StaticPriorityQueue`2.reset(System.Int32)">
            <summary>
            Removes an element from the tree, resetting its value to the default state.
            </summary>
            <param name="i">The index of the element to be removed.</param>
        </member>
        <member name="T:Bearded.Utilities.Collections.DeletableObjectList`1">
            <summary>
            This class represents a list that automatically removes items that have been deleted as specified by the IDeletable interface.
            It uses a List as backing data structure.
            The backing data structure is automatically compacted after too many deletions, and when there are no active enumerators.
            Enumeration of the list skips all deleted items, and items can be deleted while enumerating.
            Apart from manual removal and forced compaction all operations of this class are armourtised constant time.
            This list is not threadsafe.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.DeletableObjectList`1.MaxEmptyFraction">
            <summary>
            Gets or sets the maximmum fraction of deleted objects this list can contain before it compacts the backing data structure.
            The lower the value, the more aggressively and more often is the list compacted.
            A value of 0 compacts as often as possible.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Collections.DeletableObjectList`1.ApproximateCount">
            <summary>
            Gets an approximation of the number of items in the list.
            The value is an inclusive upper bound to the actual number of items.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new deletable object list.
            </summary>
            <param name="capacity">Initial capacity of the backing data structure.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.Add(`0)">
            <summary>
            Adds an item to this deletable object list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.Remove(`0)">
            <summary>
            Tries removing a given item from the list.
            This performs a linear search and therefor runs in O(n) time, where n the number of items in the list,
            assuming frequent enumeration or forced compaction.
            This method does not have to be called for items with Deleted set to true. Those items will be removed automatically.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.Clear">
            <summary>
            Clears the list of all items.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.ForceCompact">
            <summary>
            Force the list to compact its backing data structure for optimal enumeration performance.
            This operation takes O(n) time, where n the number of items in the list,
            assuming frequent enumeration or forced compaction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Collections.DeletableObjectList`1.TrimExcess">
            <summary>
            Force the list to compact its backing data structure for optimal enumeration performance.
            It further trims it to use minimal memory.
            This operation takes O(n) time, where n the number of items in the list,
            assuming frequent enumeration or forced compaction.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.LogEvent">
            <summary>
            An event containing a log entry.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Logger">
            <summary>
            Automatic class to improve logging by keeping track of logged history, added events, and adding semantics to log messages.
            Unless otherwise mentioned, the members of this class are thread-safe.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Logger.Writer">
            <summary>
            Provides an interface to log messages at a specific severity.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Logger.Writer.Log(System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="text">Text to log.</param>
        </member>
        <member name="M:Bearded.Utilities.Logger.Writer.Log``1(``0)">
            <summary>
            Logs an object.
            </summary>
            <param name="obj">Value to log.</param>
        </member>
        <member name="M:Bearded.Utilities.Logger.Writer.Log(System.String,System.Object[])">
            <summary>
            Logs a message.
            </summary>
            <param name="text">Template string of the error.</param>
            <param name="parameters">Parameters inserted into template string.</param>
        </member>
        <member name="P:Bearded.Utilities.Logger.Fatal">
            <summary>
            Writer to log fatal messages.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Error">
            <summary>
            Writer to log error messages.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Warning">
            <summary>
            Writer to log warning messages.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Info">
            <summary>
            Writer to log info messages.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Debug">
            <summary>
            Writer to log debug messages.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Trace">
            <summary>
            Writer to log trace messages.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Logger.Severity">
            <summary>
            Used to add semantic categories to log messages.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Fatal">
            <summary>
            Used for any error that forces an application shutdown.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Error">
            <summary>
            Used for errors that are fatal to the operation, but leave the application alive.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Warning">
            <summary>
            Used for anything that can cause application oddities.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Info">
            <summary>
            Used for generally useful information to log.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Debug">
            <summary>
            Used for information that is diagnostically helpful to people more than just developers.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Logger.Severity.Trace">
            <summary>
            Used for tracing purposes only.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Logger.Entry">
            <summary>
            A log entry.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Entry.Text">
            <summary>
            Gets the text of the log entry.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Entry.Severity">
            <summary>
            Gets the severity of the log entry.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.Entry.Time">
            <summary>
            Gets the time of the log entry.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Logger.Entry.#ctor(System.String,Bearded.Utilities.Logger.Severity)">
            <summary>
            Creates a log entry.
            </summary>
            <param name="text">The text of the entry.</param>
            <param name="severity">The severity of the entry.</param>
        </member>
        <member name="M:Bearded.Utilities.Logger.Entry.#ctor(System.String,Bearded.Utilities.Logger.Severity,System.DateTime)">
            <summary>
            Creates a log entry that overrides the current time.
            </summary>
            <param name="text">The text of the entry.</param>
            <param name="severity">The severity of the entry.</param>
            <param name="time">The time for the log entry.</param>
        </member>
        <member name="P:Bearded.Utilities.Logger.RecentEntries">
            <summary>
            Gets the stored history of events.
            Iterating this collection might throw exceptions if new entries are locked in the mean time, wether by the calling or by other threads.
            For thread-safe iteration, use GetSafeRecentEntries.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Logger.GetSafeRecentEntries">
            <summary>
            Gets a copy of the recent entry history.
            This is the only thread-safe way of accessing the history.
            This method allocates significant memory and should not be used unless necessary.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Logger.GetSafeRecentEntriesWithSeverity(Bearded.Utilities.Logger.Severity)">
            <summary>
            Gets a copy of the recent entry history with a minimum severity.
            This is the only thread-safe way of accessing the history.
            This method allocates significant memory and should not be used unless necessary.
            </summary>
        </member>
        <member name="E:Bearded.Utilities.Logger.Logged">
            <summary>
            If RaiseEvents is true, this event is raised every time an event is added to the log.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.MirrorToConsole">
            <summary>
            If this is true, all added events are automatically written to the standard output.
            Default is true.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.RaiseEvents">
            <summary>
            If this is true, the Logged event is raised for every added entry.
            Default is true.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.AllowPruning">
            <summary>
            If this is true, the logged history will be pruned regularly as controlled by MaxHistoryLength and PrunedLength.
            Default is true.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.MaxHistoryLength">
            <summary>
            If AllowPruning is true, when the log reaches this length, it is pruned by deleting older entries until it is PrunedLength long.
            Default is 10,000.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Logger.PrunedLength">
            <summary>
            This is the length the list is pruned to everytime it reaches MaxHistoryLength.
            Default is 5,000.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Logger.AddEntry(Bearded.Utilities.Logger.Entry)">
            <summary>
            Adds an entry to the log.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.StaticRandom">
            <summary>
            This static class offers a variety of pseudo random methods.
            The class is threadsafe and uses a different internal random object for each thread.
            Note that several of the methods are slightly biased for the sake of performance.
            </summary>
            <remarks>The actual implementations of the custom random methods can be found in RandomExtensions.</remarks>
        </member>
        <member name="P:Bearded.Utilities.StaticRandom.Random">
            <summary>
            The thread safe instance of Random used by StaticRandom
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.SeedWith(System.Int32)">
            <summary>
            Overrides the Random object for the calling thread by one with the given seed.
            </summary>
            <param name="seed">The seed</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Int">
            <summary>
            Returns a random integer.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Int(System.Int32)">
            <summary>
            Returns a (biased) random integer in the interval [0, upper bound[.
            </summary>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Int(System.Int32,System.Int32)">
            <summary>
            Returns random (biased) integer in the interval [lower bound, upper bound[.
            </summary>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Long">
            <summary>
            Returns random (biased) long integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Long(System.Int64)">
            <summary>
            Returns random (biased) long integer in the interval [0, upper bound[.
            </summary>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Long(System.Int64,System.Int64)">
            <summary>
            Returns random (biased) long integer in the interval [lower bound, upper bound[.
            </summary>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Double">
            <summary>
            Returns a random double in the interval [0, 1[.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Double(System.Double)">
            <summary>
            Returns a random double in the interval [0, upper bound[.
            </summary>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Double(System.Double,System.Double)">
            <summary>
            Returns a random double in the interval [lower bound, upper bound[.
            </summary>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.NormalDouble">
            <summary>
            Generates a random double using the standard normal distribution.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.NormalDouble(System.Double,System.Double)">
            <summary>
            Generates a random double using the normal distribution with the given mean and deviation.
            </summary>
            <param name="mean">The expected value.</param>
            <param name="deviation">The standard deviation.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Float">
            <summary>
            Returns random float in the interval [0, 1[.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Float(System.Single)">
            <summary>
            Returns a random float in the interval [0, upper bound[.
            </summary>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Float(System.Single,System.Single)">
            <summary>
            Returns a random float in the interval [lower bound, upper bound[.
            </summary>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.NormalFloat">
            <summary>
            Generates a random float using the standard normal distribution.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.NormalFloat(System.Single,System.Single)">
            <summary>
            Generates a random float using the normal distribution with the given mean and deviation.
            </summary>
            <param name="mean">The expected value.</param>
            <param name="deviation">The standard deviation.</param>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Sign">
            <summary>
            Returns -1 or 1 randomly.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Bool(System.Double)">
            <summary>
            Returns a random boolean value.
            </summary>
            <param name="probability">The probability with which to return true.</param>
            <returns>Always returns true for probabilities greater or equal to 1 and false for probabilities less or equal to 0.</returns>
        </member>
        <member name="M:Bearded.Utilities.StaticRandom.Discretise(System.Single)">
            <summary>
            Returns an integer with a given expected value. Will always return either the floor or ceil of the given value.
            </summary>
            <param name="value">The expected value.</param>
        </member>
        <member name="T:Bearded.Utilities.RandomExtensions">
            <summary>
            This class adds a variety of extension methods for the Random class to expand its functionality.
            Note that several of these methods are slightly biased for the sake of performance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextLong(System.Random)">
            <summary>
            Returns random (biased) long integer.
            </summary>
            <param name="random">The Random instance to sample with.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextLong(System.Random,System.Int64)">
            <summary>
            Returns random (biased) long integer in the interval [0, upper bound[
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextLong(System.Random,System.Int64,System.Int64)">
            <summary>
            Returns random (biased) long integer in the interval [lower bound, upper bound[
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextDouble(System.Random,System.Double)">
            <summary>
            Returns a random double in the interval [0, upper bound[.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
            Returns a random double in the interval [lower bound, upper bound[.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NormalDouble(System.Random)">
            <summary>
            Generates a random double using the standard normal distribution.
            </summary>
            <param name="random">The Random instance to sample with.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NormalDouble(System.Random,System.Double,System.Double)">
            <summary>
            Generates a random double using the normal distribution with the given mean and deviation.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="mean">The expected value.</param>
            <param name="deviation">The standard deviation.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextFloat(System.Random)">
            <summary>
            Returns random float in the interval [0, 1[.
            </summary>
            <param name="random">The Random instance to sample with.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextFloat(System.Random,System.Single)">
            <summary>
            Returns a random float in the interval [0, upper bound[.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
            Returns a random float in the interval [lower bound, upper bound[.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The exclusive upper bound.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NormalFloat(System.Random)">
            <summary>
            Generates a random float using the standard normal distribution.
            </summary>
            <param name="random">The Random instance to sample with.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NormalFloat(System.Random,System.Single,System.Single)">
            <summary>
            Generates a random float using the normal distribution with the given mean and deviation.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="mean">The expected value.</param>
            <param name="deviation">The standard deviation.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextSign(System.Random)">
            <summary>
            Returns -1 or 1 randomly.
            </summary>
            <param name="random">The Random instance to sample with.</param>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>
            Returns a random boolean value with specified probability.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="probability">The probability with which to return true.</param>
            <returns>Always returns true for probabilities greater or equal to 1 and false for probabilities less or equal to 0.</returns>
        </member>
        <member name="M:Bearded.Utilities.RandomExtensions.Discretise(System.Random,System.Single)">
            <summary>
            Returns an integer with a given expected value. Will always return either the floor or ceil of the given value.
            </summary>
            <param name="random">The Random instance to sample with.</param>
            <param name="value">The expected value.</param>
        </member>
        <member name="T:Bearded.Utilities.Box">
            <summary>
            Static Box class to help with box creation.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Box.This``1(``0)">
            <summary>
            Gets a new box with a given value.
            </summary>
            <param name="value">The value of the box.</param>
        </member>
        <member name="T:Bearded.Utilities.Box`1">
            <summary>
            A generic box to keep typesafe to store valuetypes on the heap.
            Advantages include reference sharing of a valuetype and atomic access for thread safety.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Box`1.Value">
            <summary>
            The value contained in the box.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Box`1.#ctor(`0)">
            <summary>
            Initialises a new box with a given value.
            </summary>
            <param name="value">The value of the box.</param>
        </member>
        <member name="T:Bearded.Utilities.Id`1">
            <summary>
            Represents a type safe ID for a given type.
            Uses a 32 bit integer and thus only guarantees uint.MaxValue unique IDs.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.Next">
            <summary>
            Returns a new id.
            This call is not thread safe. Never use this together with NextThreadSafe().
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.NextThreadSafe">
            <summary>
            Returns a new id.
            This call is thread safe. Never use this together with Next().
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.Equals(Bearded.Utilities.Id{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.op_Equality(Bearded.Utilities.Id{`0},Bearded.Utilities.Id{`0})">
            <summary>
            Compares two IDs for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Id`1.op_Inequality(Bearded.Utilities.Id{`0},Bearded.Utilities.Id{`0})">
            <summary>
            Compares two IDs for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.ResettableLazy">
            <summary>
            Static class to help make resetable lazies.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.ResettableLazy.From``1(System.Func{``0})">
            <summary>
            Creates a new resetable lazy with a given initialisation function.
            </summary>
            <param name="maker">The function to initialise the value of the lazy.</param>
        </member>
        <member name="T:Bearded.Utilities.ResettableLazy`1">
            <summary>
            This class represents a lazily initialised value. It can be reset to call the initialisation again afterwards.
            It is not thread safe.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.ResettableLazy`1.Value">
            <summary>
            Gets the value of this instance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.ResettableLazy`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new resetable lazy instance.
            </summary>
            <param name="maker">The function that initialises the value for this instance.</param>
        </member>
        <member name="M:Bearded.Utilities.ResettableLazy`1.Reset">
            <summary>
            Resets the lazy to get a new value when accessed next.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Singleton`1">
            <summary>
            A helper class to make singleton creation trivial.
            Simply inherit from this class giving the inheriting own type as generic parameter.
            The first object created of the inheriting type will be the singleton object accessible through the instance property on the inheriting type.
            An exception is thrown when a second instance of the type is created to enforce the singleton pattern.
            </summary>
            <typeparam name="TSelf">The inheriting type.</typeparam>
        </member>
        <member name="P:Bearded.Utilities.Singleton`1.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Singleton`1.#ctor">
            <summary>
            Creates a new instance of the inheriting type which will act as singleton.
            Calling this more than once will throw an exception.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Void">
            <summary>
            Represents a type containing no information.
            Useful to use as generic parameter.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.DigitalAction">
            <summary>
            An abstraction for digital (non analog) actions like keyboard keys and gamepad buttons.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.DummyAction">
            <summary>
            An implementation of IAction with no functionality.
            This is used mainly for unbound actions, and for gamepad actions that were deserialised for a non connected gamepad, to not lose the name of the control.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.GamePadAction">
            <summary>
            Contains functionality to create actions for gamepad controls.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.GamePadAction.Settings">
            <summary>
            Contains mutable settings for gamepad axes like deadzone and power settings.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.GamePadAction.Settings.HitValue">
            <summary>
            The value at which gamepad axes register a hit.
            Default is 0.6f.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.GamePadAction.Settings.ReleaseValue">
            <summary>
            The value to which gamepad axes have to return after a hit to reset.
            Default is 0.4f.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.GamePadAction.Settings.AnalogDeadZone">
            <summary>
            The dead zone of gamepad axes.
            Default is 0.05f.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.GamePadAction.Settings.AnalogMaxValue">
            <summary>
            The maximum value to which gamepad axes are set. In effect the opposite of a deadzone.
            Default is 0.95f;
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.GamePadAction.Settings.AnalogPower">
            <summary>
            The power to which the gamepad axis input should be raised.
            Values below 1 cause lower, and values above 1 result in higher sensitivity.
            Default is 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.GamePadAction.FromString(System.String)">
            <summary>
            Tries creating a gamepad action from a string.
            Throws an exception of the string is for a valid gamepad, but not for a valid gamepad control.
            </summary>
            <param name="name">The name of the action to create.</param>
            <returns>A functional IAction if the specified gamepad exists;
            a non functional dummy action with the correct name if the specified gamepad does not exist (or is not connected or found);
            null if the specified string is no gamepad action.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.GamePadAction.GetAll(Bearded.Utilities.Input.InputManager.GamePadStateContainer)">
            <summary>
            Returns all actions for a specified gamepad.
            </summary>
            <param name="pad">The gamepad to get actions for.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.GamePadAction.GetAll(System.Int32)">
            <summary>
            Returns all actions for a gamepad id.
            </summary>
            <param name="id">The gamepad id to get actions for.</param>
        </member>
        <member name="T:Bearded.Utilities.Input.IAction">
            <summary>
            Represents a simple generic input source, like a keyboard key or a gamepad stick axis.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.IAction.Hit">
            <summary>
            Whether the input was hit (or clicked) this frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.IAction.Active">
            <summary>
            Whether the input is being held down.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.IAction.Released">
            <summary>
            Whether the input was released this frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.IAction.IsAnalog">
            <summary>
            Whether the input can supply an analog value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.IAction.AnalogAmount">
            <summary>
            The analog value of the input.
            If no analog value is available, this is equal to Active ? 1 : 0.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.InputAction">
            <summary>
            Contains methods to easily create and modify actions.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.FromString(System.String)">
            <summary>
            Creates an action from a given string identifier.
            Throws an exception if the given string specifies a key or gamepad control that does not exist.
            </summary>
            <param name="value">The action name.</param>
            <returns>A valid and functional action if the name is valid;
            null if neither a keyboard nor a gamepad action is specified;
            a non functional dummy action with correct name, if a gamepad action for a not connected gamepad is specified.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.GetAllAvailable">
            <summary>
            Returns a sequence of all currently valid actions, including all keyboard keys, as well as all controls for all connected gamepads.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.IsSameAs(Bearded.Utilities.Input.IAction,Bearded.Utilities.Input.IAction)">
            <summary>
            Compares two actions by their string names for equality.
            </summary>
            <returns>True if the actions are or represent the same control; false otherwise.</returns>
        </member>
        <member name="P:Bearded.Utilities.Input.InputAction.Unbound">
            <summary>
            A non-functional dummy action to use as placeholder or default/unbound value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.AnyOf(Bearded.Utilities.Input.IAction[])">
            <summary>
            Returns a new action that is activated by any of the given actions.
            </summary>
            <param name="actions">A sequence of actions to combine into one.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.AnyOf(System.Collections.Generic.IEnumerable{Bearded.Utilities.Input.IAction})">
            <summary>
            Returns a new action that is activated by any of the given actions.
            </summary>
            <param name="actions">A sequence of actions to combine into one.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.Or(Bearded.Utilities.Input.IAction,System.Collections.Generic.IEnumerable{Bearded.Utilities.Input.IAction})">
            <summary>
            Returns an action that combines and is activated by both given actions.
            </summary>
            <param name="me">First action.</param>
            <param name="others">Second action.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.InputAction.Or(Bearded.Utilities.Input.IAction,Bearded.Utilities.Input.IAction[])">
            <summary>
            Returns an action that combines and is activated by all given actions.
            </summary>
            <param name="me">One action.</param>
            <param name="others">Other actions.</param>
        </member>
        <member name="T:Bearded.Utilities.Input.InputManager">
            <summary>
            The class for managing input.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.SetMouse(OpenTK.Input.MouseDevice)">
            <summary>
            Sets the mouse device to use for determining the current mouse position.
            </summary>
            <param name="mouse"></param>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.Initialize(OpenTK.Input.MouseDevice)">
            <summary>
            Initializes the input manager.
            </summary>
            <param name="mouse">The mouse device to use for determining the current mouse position.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.Update">
            <summary>
            Moves the input states one frame forward.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsKeyPressed(OpenTK.Input.Key)">
            <summary>
            Determines whether the specified key is held down.
            </summary>
            <param name="k"></param>
            <returns>True if the specified key is held down.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsKeyHit(OpenTK.Input.Key)">
            <summary>
            Determines whether the specified key was hit in the last frame.
            </summary>
            <param name="k"></param>
            <returns>True if the specified key was hit in the last frame.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsKeyReleased(OpenTK.Input.Key)">
            <summary>
            Determines whether the specified key was released in the last frame.
            </summary>
            <param name="k"></param>
            <returns>True if the specified key was released in the last frame.</returns>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.MousePosition">
            <summary>
            Current mouse position.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.MouseMoved">
            <summary>
            Whether the mouse was moved in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.DeltaScroll">
            <summary>
            The difference in scroll wheel values in the last frame.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsMouseButtonPressed(OpenTK.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button is held down.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsMouseButtonHit(OpenTK.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button was hit in the last frame.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsMouseButtonReleased(OpenTK.Input.MouseButton)">
            <summary>
            Determines whether the specified mouse button was released in the last frame.
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.LeftMousePressed">
            <summary>
            Whether the left mouse button is held down.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.LeftMouseHit">
            <summary>
            Whether the left mouse button was hit in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.LeftMouseReleased">
            <summary>
            Whether the left mouse button was released in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.RightMousePressed">
            <summary>
            Whether the right mouse button is held down.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.RightMouseHit">
            <summary>
            Whether the right mouse button was hit in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.RightMouseReleased">
            <summary>
            Whether the right mouse button was released in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.MiddleMousePressed">
            <summary>
            Whether the middle mouse button is held down.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.MiddleMouseHit">
            <summary>
            Whether the middle mouse button was hit in the last frame.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.MiddleMouseReleased">
            <summary>
            Whether the middle mouse button was released in the last frame.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.IsMouseInRectangle(System.Drawing.Rectangle)">
            <summary>
            Checks if the cursor is currently contained in a specified rectangle in screen coordinates.
            </summary>
            <param name="rect">The rectangle to check against.</param>
            <returns>True if the cursor is contained in the specified rectangle.</returns>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.GamePads">
            <summary>
            Collection of all connected gamepads.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.InputManager.GamePadStateContainer">
            <summary>
            Container for the current and previous state of a gamepad.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.GamePadStateContainer.Id">
            <summary>
            Unique gamepad id.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.GamePadStateContainer.CurrentState">
            <summary>
            Current state of the gamepad.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.InputManager.GamePadStateContainer.PreviousState">
            <summary>
            Previous state of the gamepad.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.GamePadStateContainer.ForId(System.Int32)">
            <summary>
            Creates a new gamepad state container for the gamepad with the specified id.
            </summary>
            <param name="id">The id of the gamepad.</param>
            <returns>A new container for the specified gamepad.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.InputManager.GamePadStateContainer.Update">
            <summary>
            Moves the gamepad state forward one frame.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.MouseAction">
            <summary>
            Contains functionality to create actions for mouse buttons.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.MouseAction.FromButton(OpenTK.Input.MouseButton)">
            <summary>
            Returns a mouse action for the specified mouse button.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.MouseAction.ForLeftButton">
            <summary>
            Returns a mouse action for the left mouse button.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.MouseAction.ForRightButton">
            <summary>
            Returns a mouse action for the right mouse button.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Input.MouseAction.ForMiddleButton">
            <summary>
            Returns a mouse action for the middle mouse button.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.MouseAction.GetAll">
            <summary>
            Returns a sequence of all mouse actions.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.KeyboardAction">
            <summary>
            Contains functionality to create actions for keyboard keys.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.KeyboardAction.FromKey(OpenTK.Input.Key)">
            <summary>
            Returns a keyboard action for the specified key.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.KeyboardAction.FromString(System.String)">
            <summary>
            Returns a keyboard actions for the specified string.
            Throws an exception if the given string specifies a keyboard action with an unknown or invalid key.
            </summary>
            <param name="name">Name of the keyboard action.</param>
            <returns>A functional action if the given name is valid;
            null if no keyboard action is specified.</returns>
        </member>
        <member name="M:Bearded.Utilities.Input.KeyboardAction.GetAll">
            <summary>
            Returns a sequence of all keyboard actions.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Input.DeferredAction">
            <summary>
            Contains functionality to create actions that dynamically accesses an underlying action for every check.
            This is useful to instantly and automatically updates rebindable controls without having to change references inside game objects.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Input.DeferredAction.From(System.Func{Bearded.Utilities.Input.IAction})">
            <summary>
            Creates a new deferred action with the given action selector.
            </summary>
            <param name="actionSelector">The selector to use to get the real action every time the returned action is used.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.DeferredAction.Any(System.Collections.Generic.IEnumerable{System.Func{Bearded.Utilities.Input.IAction}})">
            <summary>
            Creates an action that combines several deferred actions.
            </summary>
            <param name="actionSelectors">The selectors to use to get the real actions eveyr time the returned action is used.</param>
        </member>
        <member name="M:Bearded.Utilities.Input.DeferredAction.Any(System.Func{Bearded.Utilities.Input.IAction}[])">
            <summary>
            Creates an action that combines several deferred actions.
            </summary>
            <param name="actionSelectors">The selectors to use to get the real actions eveyr time the returned action is used.</param>
        </member>
        <member name="T:Bearded.Utilities.Do">
            <summary>
            Collection of methods performing simple operations.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Do.Swap``1(``0@,``0@)">
            <summary>
            Swaps the values of the two variables.
            </summary>
            <typeparam name="T">The type of the two variables.</typeparam>
            <param name="a">The first variable.</param>
            <param name="b">The second variable.</param>
        </member>
        <member name="T:Bearded.Utilities.Platform">
            <summary>
            Enumerator for platforms.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Platform.Windows">
            <summary>
            Windows platforms.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Platform.Linux">
            <summary>
            Linux platforms.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Platform.OSX">
            <summary>
            Mac platforms (OSX).
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Environment">
            <summary>
            Collection of platform-specific functions.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Environment.CurrentPlatform">
            <summary>
            The platform the application is currently running on.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Environment.UserSettingsDirectory">
            <summary>
            Gets the default user settings directory for the current platform.
            For Windows: %appdata%
            For OSX: ~/Library/Application Support
            For Linux: ~/.config
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Environment.UserSettingsDirectoryFor(System.String)">
            <summary>
            Gets the default user setting directory for a given game name.
            For Windows: %appdata%\[gamename]
            For OSX: ~/Library/Application Support/[gamename]
            For Linux: ~/.config/[gamename]
            </summary>
            <param name="gameName"></param>
            <returns></returns>
        </member>
        <member name="T:Bearded.Utilities.VoidEventHandler">
            <summary>
            Event handler for events without parameters.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.GenericEventHandler`1">
            <summary>
            Generic event handler for events with one parameter.
            </summary>
            <param name="t">The first event parameter.</param>
            <typeparam name="T">Type of the first event parameter.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.GenericEventHandler`2">
            <summary>
            Generic event handler for events with two parameters.
            </summary>
            <param name="t1">The first event parameter.</param>
            <param name="t2">The second event parameter.</param>
            <typeparam name="T1">Type of the first event parameter.</typeparam>
            <typeparam name="T2">Type of the second event parameter.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.GenericEventHandler`3">
            <summary>
            Generic event handler for events with three parameters.
            </summary>
            <param name="t1">The first event parameter.</param>
            <param name="t2">The second event parameter.</param>
            <param name="t3">The third event parameter.</param>
            <typeparam name="T1">Type of the first event parameter.</typeparam>
            <typeparam name="T2">Type of the second event parameter.</typeparam>
            <typeparam name="T3">Type of the third event parameter.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.GenericEventHandler`4">
            <summary>
            Generic event handler for events with four parameters.
            </summary>
            <param name="t1">The first event parameter.</param>
            <param name="t2">The second event parameter.</param>
            <param name="t3">The third event parameter.</param>
            <param name="t4">The fourth event parameter.</param>
            <typeparam name="T1">Type of the first event parameter.</typeparam>
            <typeparam name="T2">Type of the second event parameter.</typeparam>
            <typeparam name="T3">Type of the third event parameter.</typeparam>
            <typeparam name="T4">Type of the fourth event parameter.</typeparam>
        </member>
        <member name="T:Bearded.Utilities.IO.FileModifiedWatcher">
            <summary>
            This class can be used to watch a file for modifications by checking its last write time stamp.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.IO.FileModifiedWatcher.Path">
            <summary>
            Gets the path of the file watched.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.IO.FileModifiedWatcher.FileName">
            <summary>
            Gets the filename, without directories, of the file watched.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.IO.FileModifiedWatcher.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Bearded.Utilities.IO.FileModifiedWatcher"/> watching the specified file.
            </summary>
            <param name="path">The file to watch. Must be valid path.
            Otherwise, behaviour is undefined and exceptions may be thrown.</param>
        </member>
        <member name="M:Bearded.Utilities.IO.FileModifiedWatcher.Reset">
            <summary>
            Resets this watcher to ignore all past modifications to file.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.IO.FileModifiedWatcher.WasModified(System.Boolean)">
            <summary>
            Checks whether the file was changed since the last reset of the watcher.
            </summary>
            <param name="resetModified">Whether to reset the watcher after checking for changes.</param>
            <returns>True, if the file has a different last-write time stamp than when the watcher was reset last.
            True if the file was created or deleted since the last reset.
            False otherwise.</returns>
        </member>
        <member name="T:Bearded.Utilities.Linq.Extensions">
            <summary>
            Contains useful Linq style and related extension methods.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.Yield``1(``0)">
            <summary>
            Returns a sequence containing a single element.
            </summary>
            <param name="obj">The object to yield.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends an item to the end of a sequence.
            </summary>
            <param name="target">The original sequence.</param>
            <param name="item">The item to append.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends an item to the beginning of a sequence.
            </summary>
            <param name="target">The original sequence.</param>
            <param name="item">The item to prepend.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.NotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence, removing all elements that are null.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the element with minimum key in a sequence, as determined by a given selector function.
            </summary>
            <param name="source">The sequence.</param>
            <param name="selector">The function selecting the key.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Gets the element with maximum key in a sequence, as determined by a given selector function.
            </summary>
            <param name="source">The sequence.</param>
            <param name="selector">The function selecting the key.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.AddSorted``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Inserts an item into an already sorted list, maintaining the sort order and using the default comparer of the type.
            If the list already contains elements of the same sort value, the method inserts the new item at an any of the valid indices, not necessarily the first or last.
            If the given list is not sorted, the item will be inserted at an arbitrary index.
            This method is an O(log n) operation, where n is the number of elements in the list.
            </summary>
            <param name="list">The list to insert the item into.</param>
            <param name="item">The item to be inserted.</param>
            <returns>The index at which the item was inserted.</returns>
            <exception cref="T:System.ArgumentNullException">List is null.</exception>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.AddSorted``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Inserts an item into an already sorted list, maintaining the sort order.
            If the list already contains elements of the same sort value, the method inserts the new item at an any of the valid indices, not necessarily the first or last.
            If the given list is not sorted, the item will be inserted at an arbitrary index.
            This method is an O(log n) operation, where n is the number of elements in the list.
            </summary>
            <param name="list">The list to insert the item into.</param>
            <param name="item">The item to be inserted.</param>
            <param name="comparer">Compared to use when determining item sort order.</param>
            <returns>The index at which the item was inserted.</returns>
            <exception cref="T:System.ArgumentNullException">List or comparer is null.</exception>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.TryGetTransformedValue``3(System.Collections.Generic.Dictionary{``0,``1},``0,``2@,System.Func{``1,``2})">
            <summary>
            Tries getting a value from a dictionary. If this succeeds further passes that value through a given function.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to look up.</param>
            <param name="result">The resulting transformed value.</param>
            <param name="transform">The function transforming the value into the result.</param>
            <returns>True if the value was found, false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds a sequence of key value paris to a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="other">KeyValuePairs to add.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.RandomElement``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Selects a random element from a sequence.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="source">The sequance to choose a random element from.</param>
            <param name="random">An optional random object to be used. If none is given, StaticRandom is used instead.</param>
            <returns>A random element from the input.</returns>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Efficiently (O(n) with n the size of the input) selects a random number of elements from an enumerable.
            Each element has an equal chance to be contained in the result. The order of the output is arbitrary.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="source">The enumerable that random elements are selected from.</param>
            <param name="count">The number of random elements to return. If this is smaller than the inputs size, the entire input is returned.</param>
            <param name="random">An optional random object to be used. If none is given, StaticRandom is used instead.</param>
            <returns>Random elements from the input.</returns>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Shuffles the list. This is a linear operation in the length of the list.
            </summary>
            <param name="list">The list to shuffle.</param>
            <param name="random">An optional random object to be used. If none is given, StaticRandom is used instead.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.Shuffled``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns a new shuffled list with the elements from the given sequence.
            </summary>
            <param name="source">The sequence to shuffle.</param>
            <param name="random">An optional random object to be used. If none is given, StaticRandom is used instead.</param>
        </member>
        <member name="M:Bearded.Utilities.Linq.Extensions.ShuffledDeferred``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Returns an enumerable that iterates the source in random order.
            Contrary to Shuffled() this method deferres shuffling until iteration.
            The first iteration step will take linear time, but all others are constant time.
            </summary>
            <remarks>
            This method is useful to include a shuffle operation in a deferred query,
            or when the number of randomly ordered elements needed is only made known when iterating them.
            For most other cases, Shuffled() is a simpler alternative.
            </remarks>
            <param name="source">The sequence to shuffle.</param>
            <param name="random">An optional random object to be used. If none is given, StaticRandom is used instead.</param>
        </member>
        <member name="T:Bearded.Utilities.Math.Angle">
            <summary>
            A typesafe representation of a signed angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.FromRadians(System.Single)">
            <summary>
            Initialises an angle from a relative angle value in radians.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.FromDegrees(System.Single)">
            <summary>
            Initialises an angle from a relative angle value in degrees.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Between(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Initialises an angle as the signed difference between two directional unit vectors in the 2D plane.
            If the vectors are not unit length the result is undefined.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Between(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Initialises an angle as the signed difference between two directions in the 2D plane.
            The returned value is the smallest possible angle from one direction to the other.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.BetweenPositive(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Initialises an angle as the signed difference between two directions in the 2D plane.
            The returned value is the smallest positive angle from one direction to the other.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.BetweenNegative(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Initialises an angle as the signed difference between two directions in the 2D plane.
            The returned value is the smallest negative angle from one direction to the other.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Angle.Zero">
            <summary>
            The default zero angle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Angle.Radians">
            <summary>
            Gets the value of the angle in radians.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Angle.Degrees">
            <summary>
            Gets the value of the angle in degrees.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Angle.Transformation">
            <summary>
            Gets a 2x2 rotation matrix that rotates vectors by this angle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Angle.MagnitudeInRadians">
            <summary>
            Gets the magnitude (absolute value) of the angle in radians.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Angle.MagnitudeInDegrees">
            <summary>
            Gets the magnitude (absolute value) of the angle in degrees.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Sin">
            <summary>
            Returns the Sine of the angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Cos">
            <summary>
            Returns the Cosine of the angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Tan">
            <summary>
            Returns the Tangent of the angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Sign">
            <summary>
            Returns the Sign of the angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Abs">
            <summary>
            Returns the absolute value of the angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Normalized">
            <summary>
            Returns a new Angle with |value| == 1 radians and the same sign as this angle.
            Returns a new Angle with value 0 if the angle is zero.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Clamped(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Clamps this angle between a minimum and a maximum angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Max(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Returns the larger of two angles.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Min(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Returns the smaller of two angles.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Clamp(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Clamps one angle between a minimum and a maximum angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Addition(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Adds two angles.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Subtraction(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Substracts an angle from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_UnaryNegation(Bearded.Utilities.Math.Angle)">
            <summary>
            Inverts an angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Multiply(Bearded.Utilities.Math.Angle,System.Single)">
            <summary>
            Multiplies an angle with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Multiply(System.Single,Bearded.Utilities.Math.Angle)">
            <summary>
            Multiplies an angle with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Division(Bearded.Utilities.Math.Angle,System.Single)">
            <summary>
            Divides an angle by an inverse scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Lerp(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle,System.Single)">
            <summary>
            Linearly interpolates between two angles.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Equals(Bearded.Utilities.Math.Angle)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/>, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Equality(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks two angles for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Inequality(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks two angles for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_LessThan(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks whether one angle is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_GreaterThan(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks whether one angle is greater than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_LessThanOrEqual(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks whether one angle is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_GreaterThanOrEqual(Bearded.Utilities.Math.Angle,Bearded.Utilities.Math.Angle)">
            <summary>
            Checks whether one angle is greater or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Angle.op_Explicit(Bearded.Utilities.Math.Angle)~Bearded.Utilities.Math.Direction2">
            <summary>
            Casts an angle to a direction in the 2D plane.
            This is the same as Direction.Zero + angle.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Math.Direction2">
            <summary>
            A typesafe representation of a direction in two dimensional space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.FromRadians(System.Single)">
            <summary>
            Initialises a direction from an absolute angle value in radians.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.FromDegrees(System.Single)">
            <summary>
            Initialises a direction from an absolute angle value in degrees.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.Of(OpenTK.Vector2)">
            <summary>
            Initialises a direction along a vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.Between(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Initialises the direction between two points.
            </summary>
            <param name="from">The base point.</param>
            <param name="to">The point the directions "points" towards.</param>
        </member>
        <member name="F:Bearded.Utilities.Math.Direction2.Zero">
            <summary>
            Default base direction (along positive X axis).
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Direction2.Radians">
            <summary>
            Gets the absolute angle of the direction in radians between 0 and 2pi.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Direction2.Degrees">
            <summary>
            Gets the absolute angle of the direction in degrees between 0 and 360.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Direction2.RadiansSigned">
            <summary>
            Gets the absolute angle of the direction in radians between -pi and pi.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Direction2.DegreesSigned">
            <summary>
            Gets the absolute angle of the direction in degrees between -180 and 180.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Direction2.Vector">
            <summary>
            Gets the unit vector pointing in this direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.TurnedTowards(Bearded.Utilities.Math.Direction2,System.Single)">
            <summary>
            Returns this direction turnen towards a goal direction with a given maximum step length in radians.
            This will never overshoot the goal.
            </summary>
            <param name="goal">The goal direction.</param>
            <param name="maxStepInRadians">The maximum step length in radians. Negative values will return the original direction.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.Lerp(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2,System.Single)">
            <summary>
            Linearly interpolates between two directions.
            This always interpolates along the shorter arc.
            </summary>
            <param name="d0">The first direction (at p == 0).</param>
            <param name="d1">The second direction (at p == 1).</param>
            <param name="p">The parameter.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_Addition(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Angle)">
            <summary>
            Adds an angle to a direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_Subtraction(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Angle)">
            <summary>
            Substracts an angle from a direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_Subtraction(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Gets the signed difference between two directions.
            Always returns the angle of the shorter arc.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_UnaryNegation(Bearded.Utilities.Math.Direction2)">
            <summary>
            Gets the inverse direction to a direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.Equals(Bearded.Utilities.Math.Direction2)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_Equality(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Checks two directions for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Direction2.op_Inequality(Bearded.Utilities.Math.Direction2,Bearded.Utilities.Math.Direction2)">
            <summary>
            Checks two directions for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Math.Arc`1">
            <summary>
            Represents a generic arc.
            The class handles calculation of the approximate length and is able to normalise against the tangent length.
            </summary>
            <typeparam name="T">The coordinate type.</typeparam>
        </member>
        <member name="P:Bearded.Utilities.Math.Arc`1.Length">
            <summary>
            The (approximate) length of the arc.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Arc`1.#ctor(System.Int32)">
            <summary>
            Initializes the arc.
            </summary>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Arc`1.getPointAt(System.Single)">
            <summary>
            Calculates the position of the point on the arc at parameter t.
            </summary>
            <param name="t">The arc parameter (should be between 0 and 1).</param>
            <returns>The coordinates of the point on the arc at the specified parameter.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Arc`1.getDistanceBetween(`0,`0)">
            <summary>
            Calculates the distance between a set of coordinates.
            </summary>
            <param name="p1">The first coordinate.</param>
            <param name="p2">The second coordinate.</param>
            <returns>The distance between the specified coordinates.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Arc`1.GetPointAt(System.Single)">
            <summary>
            Gets the point at the specified parameter of the arc taking tangent speed into account.
            </summary>
            <param name="t">The arc parameter (should be between 0 and 1).</param>
            <returns>The coordinates of the point on the arc at the specified parameter.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Arc`1.GetPointAtNormalised(System.Single)">
            <summary>
            Gets the point at the specified parameter of the arc normalised against tangent speed.
            </summary>
            <param name="t">The arc parameter (should be between 0 and 1).</param>
            <returns>The coordinates of the point on the arc at the specified parameter.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Extensions">
            <summary>
            Math extension methods.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Clamped(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value to a specified range.
            </summary>
            <param name="value">The value that should be restricted to the specified range.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Clamped(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value to a specified range.
            </summary>
            <param name="value">The value that should be restricted to the specified range.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Clamped(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the value to a specified range.
            </summary>
            <param name="value">The value that should be restricted to the specified range.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.ModuloN(System.Int32,System.Int32)">
            <summary>
            Gives the number projected to Zn.
            </summary>
            <param name="a">The number.</param>
            <param name="n">The modulo.</param>
            <returns>a (mod n)</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Squared(System.Int32)">
            <summary>
            Squares an integer.
            </summary>
            <param name="i">The integer.</param>
            <returns>The square.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Squared(System.Single)">
            <summary>
            Squares a float.
            </summary>
            <param name="f">The float.</param>
            <returns>The square.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Squared(System.Double)">
            <summary>
            Squares a double.
            </summary>
            <param name="d">The double.</param>
            <returns>The square.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Cubed(System.Int32)">
            <summary>
            Cubes an integer.
            </summary>
            <param name="i">The integer.</param>
            <returns>The cube.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Cubed(System.Single)">
            <summary>
            Squares a float.
            </summary>
            <param name="f">The float.</param>
            <returns>The square.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Cubed(System.Double)">
            <summary>
            Squares a double.
            </summary>
            <param name="d">The double.</param>
            <returns>The cube.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Tan(System.Single)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Acos(System.Single)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Asin(System.Single)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Atan(System.Single)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Sqrted(System.Single)">
            <summary>
            Returns the square root of the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Powed(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="b"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.CeiledToInt(System.Single)">
            <summary>
            Returns the lowest integral number higher than or equal to the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.FlooredToInt(System.Single)">
            <summary>
            Returns the highest integral number lower than or equal to the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.RoundedToInt(System.Single)">
            <summary>
            Returns the integral number closest to the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.CeiledToInt(System.Double)">
            <summary>
            Returns the lowest integral number higher than or equal to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.FlooredToInt(System.Double)">
            <summary>
            Returns the highest integral number lower than or equal to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.RoundedToInt(System.Double)">
            <summary>
            Returns the integral number closest to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.ThrowIfNaN(System.Single,System.String)">
            <summary>
            Throws an exception if the specified float is NaN.
            </summary>
            <param name="f">The float to check.</param>
            <param name="exceptionString">The string message for the exception.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.ThrowIfNaN(OpenTK.Vector2,System.String)">
            <summary>
            Throws an exception if any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <param name="exceptionString">The string message for the exception.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.ThrowIfNaN(OpenTK.Vector3,System.String)">
            <summary>
            Throws an exception if any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <param name="exceptionString">The string message for the exception.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.ThrowIfNaN(OpenTK.Vector4,System.String)">
            <summary>
            Throws an exception if any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <param name="exceptionString">The string message for the exception.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.IsNaN(OpenTK.Vector2)">
            <summary>
            Checks whether any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <returns>True if any of the components is NaN.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.IsNaN(OpenTK.Vector3)">
            <summary>
            Checks whether any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <returns>True if any of the components is NaN.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.IsNaN(OpenTK.Vector4)">
            <summary>
            Checks whether any of the vector components is NaN.
            </summary>
            <param name="vector">The vector to check.</param>
            <returns>True if any of the components is NaN.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.WithZ(OpenTK.Vector2,System.Single)">
            <summary>
            Turns the vector into a three-dimensional vector.
            </summary>
            <param name="xy">Original vector.</param>
            <param name="z">z-coordinate of the new vector.</param>
            <returns>A three-dimensional vector.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.WithW(OpenTK.Vector3,System.Single)">
            <summary>
            Turns the vector into a homogenuous vector.
            </summary>
            <param name="xyz">Original vector.</param>
            <param name="w">w-coordinate of the new vector.</param>
            <returns>A homogenuous vector.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.WithZw(OpenTK.Vector2,System.Single,System.Single)">
            <summary>
            Turns the vector into a homogenuous vector.
            </summary>
            <param name="xy">Original vector.</param>
            <param name="z">z-coordinate of the new vector.</param>
            <param name="w">w-coordinate of the new vector.</param>
            <returns>A homogenuous vector.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.NormalizedSafe(OpenTK.Vector2)">
            <summary>
            Normalizes a vector. If all components of the vector are zero, no exception is thrown. Instead the zero vector is returned.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The zero vector if the input is a zero vector. Otherwise a unit vector in the same direction as the input.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.NormalizedSafe(OpenTK.Vector3)">
            <summary>
            Normalizes a vector. If all components of the vector are zero, no exception is thrown. Instead the zero vector is returned.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The zero vector if the input is a zero vector. Otherwise a unit vector in the same direction as the input.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.NormalizedSafe(OpenTK.Vector4)">
            <summary>
            Normalizes a vector. If all components of the vector are zero, no exception is thrown. Instead the zero vector is returned.
            </summary>
            <param name="vector">The vector to normalize.</param>
            <returns>The zero vector if the input is a zero vector. Otherwise a unit vector in the same direction as the input.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Radians(System.Single)">
            <summary>
            Converts floating point value into a type safe angle representation in radians.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Degrees(System.Single)">
            <summary>
            Converts floating point value into a type safe angle representation in degrees.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Extensions.Degrees(System.Int32)">
            <summary>
            Converts an integer value into a type safe angle representation in degrees.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Math.Interval">
            <summary>
            A collection of interval helper methods.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Interval.DoOverlap(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks if two closed intervals overlap.
            </summary>
            <param name="amin">The (inclusive) lower bound of the first interval.</param>
            <param name="amax">The (inclusive) upper bound of the first interval.</param>
            <param name="bmin">The (inclusive) lower bound of the second interval.</param>
            <param name="bmax">The (inclusive) upper bound of the second interval.</param>
            <returns></returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Mathf">
            <summary>
            Collection of math-related functions.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.Sqrt2">
            <summary>
            Represents the square root of 2 (1.414213f).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.Sqrt3">
            <summary>
            Represents the square root of32 (1.732051f).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.Pi">
            <summary>
            Represents the value of pi (3.14159274).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.PiOver2">
            <summary>
            Represents the value of pi divided by two (1.57079637).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.PiOver4">
            <summary>
            Represents the value of pi divided by four (0.7853982).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.TwoPi">
            <summary>
            Represents the value of pi times two (6.28318548).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Math.Mathf.Tau">
            <summary>
            Represents the value of tau (6.28318548).
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Cos(System.Single)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Sin(System.Single)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Tan(System.Single)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Acos(System.Single)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Asin(System.Single)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Atan(System.Single)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Atan2(System.Single,System.Single)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            </summary>
            <param name="y"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Sqrt(System.Single)">
            <summary>
            Returns the square root of the specified number.
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.Pow(System.Single,System.Single)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="b"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.CeilToInt(System.Double)">
            <summary>
            Returns the lowest integral number higher than or equal to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.FloorToInt(System.Double)">
            <summary>
            Returns the highest integral number lower than or equal to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.RoundToInt(System.Double)">
            <summary>
            Returns the integral number closest to the specified number.
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.RadiansToDegrees(System.Single)">
            <summary>
            Converts an angle in radians to degrees.
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Mathf.DegreesToRadians(System.Single)">
            <summary>
            Converts an angle in degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Arc2">
            <summary>
            Represents an arc in two-dimensional Euclidean space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Arc2.#ctor(System.Int32)">
            <summary>
            Initializes the arc.
            </summary>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Arc2.getDistanceBetween(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculates the distance between two points using the Euclidean metric.
            </summary>
            <param name="p1">The first coordinate.</param>
            <param name="p2">The second coordinate.</param>
            <returns>The Euclidean distance between the specified points.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Arc3">
            <summary>
            Represents an arc in three-dimensional Euclidean space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Arc3.#ctor(System.Int32)">
            <summary>
            Initializes the arc.
            </summary>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Arc3.getDistanceBetween(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculates the distance between two points using the Euclidean metric.
            </summary>
            <param name="p1">The first coordinate.</param>
            <param name="p2">The second coordinate.</param>
            <returns>The Euclidean distance between the specified points.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Bezier2nd2">
            <summary>
            Represents a quadratic Bezier curve in two-dimensional space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier2nd2.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Int32)">
            <summary>
            Initializes the Bezier curve.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier2nd2.getPointAt(System.Single)">
            <summary>
            Calculates the point on the Bezier curve at parameter t.
            </summary>
            <param name="t">The arc parameter t.</param>
            <returns>The Euclidean coordinates of the point on the curve at parameter t.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Bezier2nd3">
            <summary>
            Represents a quadratic Bezier curve in three-dimensional space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier2nd3.#ctor(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Int32)">
            <summary>
            Initializes the Bezier curve.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier2nd3.getPointAt(System.Single)">
            <summary>
            Calculates the point on the Bezier curve at parameter t.
            </summary>
            <param name="t">The arc parameter t.</param>
            <returns>The Euclidean coordinates of the point on the curve at parameter t.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Bezier3rd2">
            <summary>
            Represents a cubic Bezier curve in two-dimensional space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier3rd2.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Int32)">
            <summary>
            Initializes the Bezier curve.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier3rd2.getPointAt(System.Single)">
            <summary>
            Calculates the point on the Bezier curve at parameter t.
            </summary>
            <param name="t">The arc parameter t.</param>
            <returns>The Euclidean coordinates of the point on the curve at parameter t.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Bezier3rd3">
            <summary>
            Represents a cubic Bezier curve in three-dimensional space.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier3rd3.#ctor(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Int32)">
            <summary>
            Initializes the Bezier curve.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="segments">The amount of linear segments the arc is split in. A larger amount of segments results in higher precision for length and remapping.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Bezier3rd3.getPointAt(System.Single)">
            <summary>
            Calculates the point on the Bezier curve at parameter t.
            </summary>
            <param name="t">The arc parameter t.</param>
            <returns>The Euclidean coordinates of the point on the curve at parameter t.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.PolarPosition">
            <summary>
            Represents a position in two-dimensional space using polar coordinates.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.PolarPosition.R">
            <summary>
            Distance from the origin.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.PolarPosition.Angle">
            <summary>
            Direction of the vector originating from the origin pointing towards the point.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.#ctor(System.Single,Bearded.Utilities.Math.Direction2)">
            <summary>
            Creates a new polar position.
            </summary>
            <param name="r">The distance of the point to the origin.</param>
            <param name="angle">The direction of the vector originating in the origin pointing towards the point.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.ToVector2">
            <summary>
            Converts the polar coordinates into Euclidean coordinates.
            </summary>
            <returns>Vector corresponding to the vector originating in the origin pointing towards this point.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.FromVector2(OpenTK.Vector2)">
            <summary>
            Converts an Euclidean position into polar coordinates.
            </summary>
            <param name="position">The Euclidean representation of the point.</param>
            <returns>The polar representation of the specified point.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.Equals(Bearded.Utilities.Math.Geometry.PolarPosition)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.op_Equality(Bearded.Utilities.Math.Geometry.PolarPosition,Bearded.Utilities.Math.Geometry.PolarPosition)">
            <summary>
            Checks two polar positions for equality.
            </summary>
            <returns>True if the polar positions are equal, false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.PolarPosition.op_Inequality(Bearded.Utilities.Math.Geometry.PolarPosition,Bearded.Utilities.Math.Geometry.PolarPosition)">
            <summary>
            Checks two polar positions for inequality.
            </summary>
            <returns>True if the polar positions are not equal, false otherwise.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Geometry.Rectangle">
            <summary>
            Represents an axis-aligned rectangle.
            All properties assume the x axis pointing right and the y axis pointing down.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.Left">
            <summary>
            The x-coodinate of the left boundary of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.Right">
            <summary>
            The x-coordinate of the right boundary of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.Top">
            <summary>
            The y-coordinate of the top boundary of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.Bottom">
            <summary>
            The y-coordinate of the bottom boundary of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.TopLeft">
            <summary>
            The coordinates of the top left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.TopRight">
            <summary>
            The coordinates of the top right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.BottomLeft">
            <summary>
            The coordinates of the bottom left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.BottomRight">
            <summary>
            The coordinates of the bottom right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Math.Geometry.Rectangle.Center">
            <summary>
            The coordinates of the center of mass of the rectangle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rectangle.
            </summary>
            <param name="x">X-coordinate of the upper left corner.</param>
            <param name="y">Y-coordinate of the upper left corner.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.#ctor(OpenTK.Vector2,System.Single,System.Single)">
            <summary>
            Creates a new rectangle.
            </summary>
            <param name="xy">Coordinates of the upper left corner.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Checks if the rectangle contains a point.
            </summary>
            <param name="x">The x-coordinate of the point to check.</param>
            <param name="y">The y-coordinate of the point to check.</param>
            <returns>True if the point is contained in the rectangle; false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.Contains(OpenTK.Vector2)">
            <summary>
            Checks if the rectangle contains a point.
            </summary>
            <param name="xy">The point to check.</param>
            <returns>True if the point is contained in the rectangle; false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.Contains(Bearded.Utilities.Math.Geometry.Rectangle)">
            <summary>
            Checks if the rectangle contains the specified rectangle.
            </summary>
            <param name="other">The rectangle to check.</param>
            <returns>True if the other rectangle is contained in this rectangle; false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.Intersects(Bearded.Utilities.Math.Geometry.Rectangle)">
            <summary>
            Checks if the rectangle intersects with the specified rectangle.
            </summary>
            <param name="other">The other rectangle.</param>
            <returns>True if the rectangles intersect; false otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.WithCorners(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Creates a new rectangle with the specified points as corners.
            </summary>
            <returns>A rectangle with the specified points as corners.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Geometry.Rectangle.WithSides(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new rectangle with its boundaries at the specified coordinates.
            </summary>
            <returns>A rectangle with the specified coordinates as boundaries.</returns>
        </member>
        <member name="T:Bearded.Utilities.Math.Interpolate">
            <summary>
            Interpolation functions.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector2,OpenTK.Vector2,System.Single)">
            <summary>
            Performs a first order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Single)">
            <summary>
            Performs a second order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Single)">
            <summary>
            Performs a third order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Performs a first order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Performs a second order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Bezier(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Performs a third order Bezier curve interpolation.
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Bezier curve interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a clamped Hermite spline interpolation.
            </summary>
            <param name="from">From position.</param>
            <param name="fromTangent">From tangent.</param>
            <param name="to">To position.</param>
            <param name="toTangent">To tangent.</param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic interpolation between two values.
            </summary>
            <param name="from">The first value.</param>
            <param name="to">The second value.</param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs a linear interpolation between two values.
            </summary>
            <param name="from">The first value.</param>
            <param name="to">The second value.</param>
            <param name="t">The amount of interpolation (between 0 and 1).</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.BiLerp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a bilinear interpolation between four values.
            </summary>
            <param name="value00">The first value.</param>
            <param name="value10">The second value.</param>
            <param name="value01">The third value.</param>
            <param name="value11">The fourth value.</param>
            <param name="u">Parameter in first dimension (between 0 and 1).</param>
            <param name="v">Parameter in second dimension (between 0 and 1).</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:Bearded.Utilities.Math.Interpolate.BiLerp(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Single,System.Single)">
            <summary>
            Performs a bilinear interpolation between four values.
            </summary>
            <param name="value00">The first value.</param>
            <param name="value10">The second value.</param>
            <param name="value01">The third value.</param>
            <param name="value11">The fourth value.</param>
            <param name="u">Parameter in first dimension (between 0 and 1).</param>
            <param name="v">Parameter in second dimension (between 0 and 1).</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.AngularAcceleration">
            <summary>
            A type-safe representation of a signed ancular acceleration.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.#ctor(Bearded.Utilities.Math.Angle)">
            <summary>
            Creates a new instance of the AngularAcceleration type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.FromRadians(System.Single)">
            <summary>
            Creates a new instance of the AngularAcceleration type from an angle in radians.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.FromDegrees(System.Single)">
            <summary>
            Creates a new instance of the AngularAcceleration type from an angle in degrees.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularAcceleration.NumericValue">
            <summary>
            Returns the numeric value of the angular acceleration in radians.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularAcceleration.AngleValue">
            <summary>
            Returns the angular value of the angular acceleration.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularAcceleration.Zero">
            <summary>
            Returns an angular acceleration with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Addition(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Adds two angular acceleration values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Subtraction(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Adds two angular acceleration values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_UnaryNegation(Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Inverts the angular acceleration.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Multiply(Bearded.Utilities.SpaceTime.AngularAcceleration,System.Single)">
            <summary>
            Multiplies the angular acceleration with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Multiplies the angular acceleration with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Division(Bearded.Utilities.SpaceTime.AngularAcceleration,System.Single)">
            <summary>
            Divides the angular acceleration by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Division(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Divides an angular acceleration by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Multiply(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies an angular acceleration by a timespan, returning an anglular velocity.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Multiplies an angular acceleration by a timespan, returning an anglular velocity.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Equality(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Compares two angular accelerations for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_Inequality(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Compares two angular accelerations for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_LessThan(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Checks if one angular acceleration is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_GreaterThan(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Checks if one angular acceleration is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Checks if one angular acceleration is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularAcceleration.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.AngularAcceleration,Bearded.Utilities.SpaceTime.AngularAcceleration)">
            <summary>
            Checks if one angular acceleration is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.AngularVelocity">
            <summary>
            A type-safe representation of a signed ancular velocity.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.#ctor(Bearded.Utilities.Math.Angle)">
            <summary>
            Creates a new instance of the AngularVelocity type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.FromRadians(System.Single)">
            <summary>
            Creates a new instance of the AngularVelocity type from an angle in radians.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.FromDegrees(System.Single)">
            <summary>
            Creates a new instance of the AngularVelocity type from an angle in degrees.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularVelocity.NumericValue">
            <summary>
            Returns the numeric value of the angular velocity in radians.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularVelocity.AngleValue">
            <summary>
            Returns the angular value of the angular velocity.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.AngularVelocity.Zero">
            <summary>
            Returns an angular velocity with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Addition(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Adds two angular velocity values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Subtraction(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Adds two angular velocity values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_UnaryNegation(Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Inverts the angular velocity.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Multiply(Bearded.Utilities.SpaceTime.AngularVelocity,System.Single)">
            <summary>
            Multiplies the angular velocity with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Multiplies the angular velocity with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Division(Bearded.Utilities.SpaceTime.AngularVelocity,System.Single)">
            <summary>
            Divides the angular velocity by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Division(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Divides an angular velocity by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Division(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides an angular velocity by a timespan, returning an angular acceleration.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Multiply(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies an angular velocity by a timespan, returning an angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Multiplies an angular velocity by a timespan, returning an angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Equality(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Compares two angular velocities for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_Inequality(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Compares two angular velocities for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_LessThan(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Checks if one angular velocity is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_GreaterThan(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Checks if one angular velocity is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Checks if one angular velocity is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.AngularVelocity.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.AngularVelocity,Bearded.Utilities.SpaceTime.AngularVelocity)">
            <summary>
            Checks if one angular velocity is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Extensions">
            <summary>
            Contains a variety of extension methods for the SpaceTime namespace.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.U(System.Double)">
            <summary>
            Creates a new instance of the Unit type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.U(System.Single)">
            <summary>
            Creates a new instance of the Unit type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.U(System.Int32)">
            <summary>
            Creates a new instance of the Unit type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.Sqrt(Bearded.Utilities.SpaceTime.Squared{Bearded.Utilities.SpaceTime.Unit})">
            <summary>
            Returns the typed square root of the squared unit value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.Sqrt(Bearded.Utilities.SpaceTime.Squared{Bearded.Utilities.SpaceTime.Speed})">
            <summary>
            Returns the typed square root of the squared speed.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Extensions.Sqrt(Bearded.Utilities.SpaceTime.Squared{Bearded.Utilities.SpaceTime.Acceleration})">
            <summary>
            Returns the typed square root of the squared acceleration.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Squared`1">
            <summary>
            Represents a type-safe squared value, backed by a float.
            </summary>
            <typeparam name="T">The squared type.</typeparam>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.FromRoot(System.Single)">
            <summary>
            Creteas a new instance of the Squared type, from a given root value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.FromValue(System.Single)">
            <summary>
            Creteas a new instance of the Squared type, from a given value.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If value is negative.</exception>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Squared`1.NumericValue">
            <summary>
            Returns the numeric value of the square.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Squared`1.Zero">
            <summary>
            Returns a Square type of value 0.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Squared`1.One">
            <summary>
            Returns a Square type of value 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_Addition(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Adds two squares.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_Division(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Divides a square by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_Equality(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Compares two squares for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_Inequality(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Compares two squares for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_LessThan(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Checks if one square is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_GreaterThan(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Checks if one square is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Checks if one square is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Squared`1.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.Squared{`0},Bearded.Utilities.SpaceTime.Squared{`0})">
            <summary>
            Checks if one square is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Acceleration">
            <summary>
            A type-safe representation of an undirected signed acceleration.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.#ctor(System.Single)">
            <summary>
            Creates a new instance of the Acceleration type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration.NumericValue">
            <summary>
            Returns the numeric value of the acceleration value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration.Squared">
            <summary>
            Returns the type-safe square of the acceleration value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration.Zero">
            <summary>
            Returns an Acceleration type with value 0.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration.One">
            <summary>
            Returns an Acceleration type with value 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Addition(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Adds two acceleration values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Subtraction(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Subtracts an acceleration value from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_UnaryNegation(Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Inverts the acceleration value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration,System.Single)">
            <summary>
            Multiples the acceleration value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Multiples the acceleration value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Division(Bearded.Utilities.SpaceTime.Acceleration,System.Single)">
            <summary>
            Divides the acceleration value by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Division(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Devides an acceleration value by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies an acceleration value by a timespan, returning a speed.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Multiplies an acceleration value by a timespan, returning a speed.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.Math.Direction2)">
            <summary>
            Multiplies a direction with an acceleration value, returning a typed acceleration vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Multiplies a direction with an acceleration value, returning a typed acceleration vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration,OpenTK.Vector2)">
            <summary>
            Multiplies an acceleration value with an untyped vector, returning a typed acceleration vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Multiply(OpenTK.Vector2,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Multiplies an acceleration value with an untyped vector, returning a typed acceleration vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Equality(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Compares two acceleration values for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_Inequality(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Compares two acceleration values for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_LessThan(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Checks if one acceleration value is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_GreaterThan(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Checks if one acceleration value is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Checks if one acceleration value is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Checks if one acceleration value is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Speed">
            <summary>
            A type-safe representation of an undirected signed speed.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.#ctor(System.Single)">
            <summary>
            Creates a new instance of the Speed type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Speed.NumericValue">
            <summary>
            Returns the numeric value of the speed value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Speed.Squared">
            <summary>
            Returns the type-safe square of the speed value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Speed.Zero">
            <summary>
            Returns a Speed type with value 0.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Speed.One">
            <summary>
            Returns a Speed type with value 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Addition(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Adds two speed values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Subtraction(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Subtracts a speed value from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_UnaryNegation(Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Inverts the speed value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.SpaceTime.Speed,System.Single)">
            <summary>
            Multiplies the speed value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Multiplies the speed value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Division(Bearded.Utilities.SpaceTime.Speed,System.Single)">
            <summary>
            Divides the speed value by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Division(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Divides a speed value by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Division(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides a speed value by a timespan, returning an acceleration.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies a speed value by a timespan, returning a unit value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Multiplies a speed value by a timespan, returning a unit value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.Math.Direction2)">
            <summary>
            Multiplies a direction with a speed value, returning a typed speed vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Multiplies a direction with a speed value, returning a typed speed vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(Bearded.Utilities.SpaceTime.Speed,OpenTK.Vector2)">
            <summary>
            Multiplies a speed value with an untyped vector, returning a typed speed vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Multiply(OpenTK.Vector2,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Multiplies a speed value with an untyped vector, returning a typed speed vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Equality(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Compares two speed values for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_Inequality(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Compares two speed values for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_LessThan(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Checks if one speed value is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_GreaterThan(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Checks if one speed value is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Checks if one speed value is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Speed.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Checks if one speed value is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Unit">
            <summary>
            A type-safe representation of an undirected signed distance or length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.#ctor(System.Single)">
            <summary>
            Creates a new instance of the Unit type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Unit.NumericValue">
            <summary>
            Returns the numeric value of the unit value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Unit.Squared">
            <summary>
            Returns the type-safe square of the unit value.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Unit.Zero">
            <summary>
            Returns a Unit type with value 0.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Unit.One">
            <summary>
            Returns a Unit type with value 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Addition(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Adds two unit values.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Subtraction(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Subtracts a unit value from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_UnaryNegation(Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Inverts the unit value.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(Bearded.Utilities.SpaceTime.Unit,System.Single)">
            <summary>
            Multiples the unit value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Multiples the unit value with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Division(Bearded.Utilities.SpaceTime.Unit,System.Single)">
            <summary>
            Divides the unit value by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Division(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Devides a unit value by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Division(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides a unit value by a timespan, returning a speed.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.Math.Direction2)">
            <summary>
            Multiplies a direction with a unit value, returning a typed vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Multiplies a direction with a unit value, returning a typed vector of the given direction and length.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(Bearded.Utilities.SpaceTime.Unit,OpenTK.Vector2)">
            <summary>
            Multiplies a unit value with an untyped vector, returning a typed vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Multiply(OpenTK.Vector2,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Multiplies a unit value with an untyped vector, returning a typed vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Equality(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Compares two unit values for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_Inequality(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Compares two unit values for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_LessThan(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Checks if one unit value is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_GreaterThan(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Checks if one unit value is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Checks if one unit value is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Unit.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Checks if one unit value is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Acceleration2">
            <summary>
            A type-safe representation of a 2d directed acceleration vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.#ctor(OpenTK.Vector2)">
            <summary>
            Creates a new instance of the Acceleration2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of the Acceleration2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.#ctor(Bearded.Utilities.SpaceTime.Acceleration,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Creates a new instance of the Acceleration2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.In(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Creates a new instance of the Acceleration2 type with a given direction and magnitude.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.NumericValue">
            <summary>
            Returns the numeric vector value of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.X">
            <summary>
            Returns the X component of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.Y">
            <summary>
            Returns the Y component of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.Direction">
            <summary>
            Returns the direction of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.Length">
            <summary>
            Returns the typed magnitude of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.LengthSquared">
            <summary>
            Returns the typed square of the magnitude of the acceleration vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Acceleration2.Zero">
            <summary>
            Returns a Acceleration2 type with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.Lerp(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration2,System.Single)">
            <summary>
            Linearly interpolates between two typed acceleration vectors.
            </summary>
            <param name="a0">The acceleration vector at t = 0.</param>
            <param name="a1">The acceleration vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.LerpTo(Bearded.Utilities.SpaceTime.Acceleration2,System.Single)">
            <summary>
            Linearly interpolates towards another typed acceleration vector.
            </summary>
            <param name="a">The acceleration vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.ProjectedOn(OpenTK.Vector2)">
            <summary>
            Projects the acceleration vector onto an untyped vector, returning the acceleration component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.ProjectedOn(Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Projects the acceleration vector onto a difference vector, returning the acceleration component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.ProjectedOn(Bearded.Utilities.Math.Direction2)">
            <summary>
            Projects the acceleration vector onto a direction, returning the acceleration component in that direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Addition(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Adds two acceleration vectors.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Subtraction(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Subtracts a acceleration vector from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_UnaryNegation(Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Inverts the acceleration vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration2,System.Single)">
            <summary>
            Multiplies the acceleration vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Multiplies the acceleration vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Division(Bearded.Utilities.SpaceTime.Acceleration2,System.Single)">
            <summary>
            Divides the acceleration vector by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Division(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration)">
            <summary>
            Divides a acceleration vector by a speed, returning an untyped vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Multiply(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies a acceleration vector by a timespan, returning a velocity vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Multiplies a acceleration vector by a timespan, returning a velocity vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Equality(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Compares two acceleration vectors for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Acceleration2.op_Inequality(Bearded.Utilities.SpaceTime.Acceleration2,Bearded.Utilities.SpaceTime.Acceleration2)">
            <summary>
            Compares two acceleration vectors for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Difference2">
            <summary>
            A type-safe representation of a 2d directed difference vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.#ctor(OpenTK.Vector2)">
            <summary>
            Creates a new instance of the Difference2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of the Difference2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.#ctor(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Creates a new instance of the Difference2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.In(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Creates a new instance of the Difference2 type with a given direction and magnitude.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.NumericValue">
            <summary>
            Returns the numeric vector value of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.X">
            <summary>
            Returns the X component of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.Y">
            <summary>
            Returns the Y component of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.Direction">
            <summary>
            Returns the direction of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.Length">
            <summary>
            Returns the typed magnitude of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.LengthSquared">
            <summary>
            Returns the typed square of the magnitude of the difference vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Difference2.Zero">
            <summary>
            Returns a Difference2 type with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.Lerp(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Difference2,System.Single)">
            <summary>
            Linearly interpolates between two typed difference vectors.
            </summary>
            <param name="d0">The difference vector at t = 0.</param>
            <param name="d1">The difference vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.LerpTo(Bearded.Utilities.SpaceTime.Difference2,System.Single)">
            <summary>
            Linearly interpolates towards another typed difference vector.
            </summary>
            <param name="d">The difference vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.ProjectedOn(OpenTK.Vector2)">
            <summary>
            Projects the difference vector onto an untyped vector, returning the speed component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.ProjectedOn(Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Projects the difference vector onto a difference vector, returning the speed component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.ProjectedOn(Bearded.Utilities.Math.Direction2)">
            <summary>
            Projects the difference vector onto a direction, returning the speed component in that direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Addition(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Adds two difference vectors.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Subtraction(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Subtracts a difference vector from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_UnaryNegation(Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Inverts the difference vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Multiply(Bearded.Utilities.SpaceTime.Difference2,System.Single)">
            <summary>
            Multiplies the difference vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Multiplies the difference vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Division(Bearded.Utilities.SpaceTime.Difference2,System.Single)">
            <summary>
            Divides the difference vector by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Division(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Divides a difference vector by a speed, returning an untyped vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Division(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides a difference vector by a timespan, returning an velocity vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Equality(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Compares two difference vectors for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Difference2.op_Inequality(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Compares two difference vectors for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Position2">
            <summary>
            A type-safe representation of an absolute 2d position vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.#ctor(OpenTK.Vector2)">
            <summary>
            Creates a new instance of the Position2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of the Position2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.#ctor(Bearded.Utilities.SpaceTime.Unit,Bearded.Utilities.SpaceTime.Unit)">
            <summary>
            Creates a new instance of the Position2 type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Position2.NumericValue">
            <summary>
            Returns the numeric vector value of the position vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Position2.X">
            <summary>
            Returns the X component of the position vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Position2.Y">
            <summary>
            Returns the Y component of the position vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Position2.Zero">
            <summary>
            Returns a Position2 type with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.Lerp(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Position2,System.Single)">
            <summary>
            Linearly interpolates between two typed position vectors.
            </summary>
            <param name="p0">The position vector at t = 0.</param>
            <param name="p1">The position vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.LerpTo(Bearded.Utilities.SpaceTime.Position2,System.Single)">
            <summary>
            Linearly interpolates towards another typed position vector.
            </summary>
            <param name="p">The position vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Addition(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Adds a difference vector to an absolute position.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Addition(Bearded.Utilities.SpaceTime.Difference2,Bearded.Utilities.SpaceTime.Position2)">
            <summary>
            Adds a difference vector to an absolute position.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Subtraction(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Subtracts a difference vector from an absolute position.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Subtraction(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Position2)">
            <summary>
            Subtracts two absolute positions, returning a difference vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Equality(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Position2)">
            <summary>
            Compares two position vectors for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Position2.op_Inequality(Bearded.Utilities.SpaceTime.Position2,Bearded.Utilities.SpaceTime.Position2)">
            <summary>
            Compares two position vectors for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Velocity2">
            <summary>
            A type-safe representation of a 2d directed velocity vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.#ctor(OpenTK.Vector2)">
            <summary>
            Creates a new instance of the Velocity2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new instance of the Velocity2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.#ctor(Bearded.Utilities.SpaceTime.Speed,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Creates a new instance of the Velocity2 type.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.In(Bearded.Utilities.Math.Direction2,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Creates a new instance of the Velocity2 type with a given direction and magnitude.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.NumericValue">
            <summary>
            Returns the numeric vector value of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.X">
            <summary>
            Returns the X component of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.Y">
            <summary>
            Returns the Y component of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.Direction">
            <summary>
            Returns the direction of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.Length">
            <summary>
            Returns the typed magnitude of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.LengthSquared">
            <summary>
            Returns the typed square of the magnitude of the velocity vector.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Velocity2.Zero">
            <summary>
            Returns a Velocity2 type with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.Lerp(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Velocity2,System.Single)">
            <summary>
            Linearly interpolates between two typed velocity vectors.
            </summary>
            <param name="v0">The velocity vector at t = 0.</param>
            <param name="v1">The velocity vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.LerpTo(Bearded.Utilities.SpaceTime.Velocity2,System.Single)">
            <summary>
            Linearly interpolates towards another typed velocity vector.
            </summary>
            <param name="v">The velocity vector at t = 1.</param>
            <param name="t">The interpolation scalar.</param>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.ProjectedOn(OpenTK.Vector2)">
            <summary>
            Projects the velocity vector onto an untyped vector, returning the speed component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.ProjectedOn(Bearded.Utilities.SpaceTime.Difference2)">
            <summary>
            Projects the velocity vector onto a difference vector, returning the speed component in that vector's direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.ProjectedOn(Bearded.Utilities.Math.Direction2)">
            <summary>
            Projects the velocity vector onto a direction, returning the speed component in that direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Addition(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Adds two velocity vectors.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Subtraction(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Subtracts a velocity vector from another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_UnaryNegation(Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Inverts the velocity vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Multiply(Bearded.Utilities.SpaceTime.Velocity2,System.Single)">
            <summary>
            Multiplies the velocity vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Multiplies the velocity vector with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Division(Bearded.Utilities.SpaceTime.Velocity2,System.Single)">
            <summary>
            Divides the velocity vector by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Division(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Speed)">
            <summary>
            Divides a velocity vector by a speed, returning an untyped vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Division(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides a velocity vector by a timespan, returning an acceleration vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Multiply(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiplies a velocity vector by a timespan, returning a difference vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Multiplies a velocity vector by a timespan, returning a difference vector.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Equality(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Compares two velocity vectors for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Velocity2.op_Inequality(Bearded.Utilities.SpaceTime.Velocity2,Bearded.Utilities.SpaceTime.Velocity2)">
            <summary>
            Compares two velocity vectors for inequality.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.Instant">
            <summary>
            A type-safe representation of an absolute instant in time.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.#ctor(System.Double)">
            <summary>
            Creates a new instance of the Instant type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Instant.NumericValue">
            <summary>
            Returns the numeric value of the time instant.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.Instant.Zero">
            <summary>
            Returns an Instant type with value 0.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Addition(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Adds a timespan to a time instant.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Addition(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Adds a timespan to a time instant.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Subtraction(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Subtracts a timespan from a time instant.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Subtraction(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Subtracts two time instants, returning a timespan.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Equality(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Compares two time instants for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_Inequality(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Compares two time instants for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_LessThan(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Checks if one time instant is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_GreaterThan(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Checks if one time instant is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Checks if one time instant is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.Instant.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.Instant,Bearded.Utilities.SpaceTime.Instant)">
            <summary>
            Checks if one time instant is larger or equal to another.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.SpaceTime.TimeSpan">
            <summary>
            A type-safe representation of a signed timespan.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.#ctor(System.Double)">
            <summary>
            Creates a new instance of the TimeSpan type.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.TimeSpan.NumericValue">
            <summary>
            Returns the numeric value of the timespan.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.TimeSpan.Zero">
            <summary>
            Returns the timespan with value 0.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.SpaceTime.TimeSpan.One">
            <summary>
            Returns the timespan with value 1.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Addition(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Adds two timespans.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Subtraction(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Adds two timespans.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_UnaryNegation(Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Inverts the timespan.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Multiply(Bearded.Utilities.SpaceTime.TimeSpan,System.Single)">
            <summary>
            Multiples the timespan with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Multiply(System.Single,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Multiples the timespan with a scalar.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Division(Bearded.Utilities.SpaceTime.TimeSpan,System.Single)">
            <summary>
            Divides the timespan by a divisor.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Division(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Devides a timespan by another, returning a type-less fraction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Equality(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Compares two timespans for equality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Inequality(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Compares two timespans for inequality.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_LessThan(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Checks if one timespan is smaller than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_GreaterThan(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Checks if one timespan is larger than another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_LessThanOrEqual(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Checks if one timespan is smaller or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_GreaterThanOrEqual(Bearded.Utilities.SpaceTime.TimeSpan,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Checks if one timespan is larger or equal to another.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.SpaceTime.TimeSpan.op_Division(Bearded.Utilities.Math.Angle,Bearded.Utilities.SpaceTime.TimeSpan)">
            <summary>
            Divides an angle by a timespan, returning an angular acceleration.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Threading.IActionQueue">
            <summary>
            Interface for queuing actions to run.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndForget(System.Action)">
            <summary>
            Queues an action to run. Returns immediately.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndAwait(System.Action)">
            <summary>
            Queues an action to run. Returns only after the action has been executed.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndReturn``1(System.Func{``0})">
            <summary>
            Queues a parameterless function to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndReturn``2(System.Func{``0,``1},``0)">
            <summary>
            Queues a function with one parameter to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndReturn``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Queues a function with two parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndReturn``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Queues a function with three parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.IActionQueue.RunAndReturn``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Queues a function with four parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
            <param name="p3">The fourth argument for calling the function.</param>
        </member>
        <member name="T:Bearded.Utilities.Threading.ManualActionQueue">
            <summary>
            A threadsafe queue to run actions from.
            Typical usage is to schedule actions from multiple threads and execute them on one main thread.
            However, actions can also be executed by multiple threads.
            If only one thread is used to execute, the actions are guaranteed to be executed in the order they were scheduled.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.ExecuteOne">
            <summary>
            Executes one scheduled action.
            If no action is scheduled, this will wait until one is scheduled, and then execute that.
            This will never return without having executed exactly one scheduled action.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.TryExecuteOne">
            <summary>
            Executes one scheduled action, if any are available.
            Returns immediately if no actions are scheduled.
            </summary>
            <returns>Whether an action was executed.</returns>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.TryExecuteOne(System.TimeSpan)">
            <summary>
            Tries to execute one scheduled action.
            If no action is available immediately, it will wait the given time span for an action to be scheduled before returning.
            </summary>
            <param name="timeout">The time span.</param>
            <returns>Whether an action was executed.</returns>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.ExecuteFor(System.TimeSpan)">
            <summary>
            Executes scheduled actions for a given time span.
            Returns after the first action, if the given time has elapsed.
            May run longer than the given time, depending on the scheduled actions, but will never take less.
            </summary>
            <param name="time">The time span.</param>
            <returns>The number of actions executed.</returns>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndForget(System.Action)">
            <summary>
            Queues an action to run. Returns immediately.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndAwait(System.Action)">
            <summary>
            Queues an action to run. Returns only after the action has been executed.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndReturn``1(System.Func{``0})">
            <summary>
            Queues a parameterless function to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndReturn``2(System.Func{``0,``1},``0)">
            <summary>
            Queues a function with one parameter to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndReturn``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Queues a function with two parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndReturn``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Queues a function with three parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.ManualActionQueue.RunAndReturn``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Queues a function with four parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
            <param name="p3">The fourth argument for calling the function.</param>
        </member>
        <member name="T:Bearded.Utilities.Threading.BackgroundActionQueue">
            <summary>
            A threadsafe queue that runs scheduled actions on a separate thread.
            Typical usage is to schedule actions from one or multiple threads to have them executed in the background.
            The actions are guaranteed to be executed in the order they are scheduled.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Threading.BackgroundActionQueue.Finished">
            <summary>
            Gets a value indicating whether this queue has finished or was aborted.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new background action queue.
            </summary>
            <param name="name">Name for the thread executing the actions of this queue.</param>
            <param name="backgroundThread">Whether the thread should run in the background or not.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.Finish(System.Boolean)">
            <summary>
            Stops the execution of further actions.
            </summary>
            <param name="executeScheduled">If true, finishes executing all actions currently scheduled, otherwise stops after the next action.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.Abort">
            <summary>
            Stops this queue from running further action, and aborts any actions currently run.
            Since it kills the underlying thread, this may not be a safe way to dispose of the queue, and may lead to data corruption.
            Consider using Finish() instead.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndForget(System.Action)">
            <summary>
            Queues an action to run. Returns immediately.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndAwait(System.Action)">
            <summary>
            Queues an action to run. Returns only after the action has been executed.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndReturn``1(System.Func{``0})">
            <summary>
            Queues a parameterless function to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndReturn``2(System.Func{``0,``1},``0)">
            <summary>
            Queues a function with one parameter to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndReturn``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Queues a function with two parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndReturn``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Queues a function with three parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
        </member>
        <member name="M:Bearded.Utilities.Threading.BackgroundActionQueue.RunAndReturn``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            Queues a function with four parameters to run. Returns the return value of the function only after the function has been executed.
            </summary>
            <param name="action">The function to run.</param>
            <param name="p0">The first argument for calling the function.</param>
            <param name="p1">The second argument for calling the function.</param>
            <param name="p2">The third argument for calling the function.</param>
            <param name="p3">The fourth argument for calling the function.</param>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Rectangular.Direction">
            <summary>
            Represents the eight directions of movement in a rectangular tilemap.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.Unknown">
            <summary>
            Unknown/no direction value. Steps in this direction have no effect.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.Right">
            <summary>
            Step to the right (0 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.UpRight">
            <summary>
            Step to the upper right. (45 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.Up">
            <summary>
            Step upwards. (90 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.UpLeft">
            <summary>
            Step to the upper left (135 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.Left">
            <summary>
            Step to the left (180 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.DownLeft">
            <summary>
            Step to the lower left (225 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.Down">
            <summary>
            Downwards step. (270 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Direction.DownRight">
            <summary>
            Step to the lower right (315 degrees).
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Rectangular.Directions">
            <summary>
            Represents any combinations of the eight directions in a rectangular tilemap.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.None">
            <summary>
            No direction.
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.Right">
            <summary>
            Step to the right (0 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.UpRight">
            <summary>
            Step to the upper right. (45 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.Up">
            <summary>
            Step upwards. (90 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.UpLeft">
            <summary>
            Step to the upper left (135 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.Left">
            <summary>
            Step to the left (180 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.DownLeft">
            <summary>
            Step to the lower left (225 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.Down">
            <summary>
            Downwards step. (270 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.DownRight">
            <summary>
            Step to the lower right (315 degrees).
            </summary>
        </member>
        <member name="F:Bearded.Utilities.Tilemaps.Rectangular.Directions.All">
            <summary>
            All directions.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Rectangular.Extensions">
            <summary>
            Extension methods for rectengular tilemaps.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Directions">
            <summary>
            A list of the eight directions in rectangular tilemaps.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Opposite(Bearded.Utilities.Tilemaps.Rectangular.Direction)">
            <summary>
            Returns the direction opposite to this one.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Octagonal(Bearded.Utilities.Math.Direction2)">
            <summary>
            Returns the closest of the eight directions inside a rectangular tilemap, by angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Quadrogonal(Bearded.Utilities.Math.Direction2)">
            <summary>
            Returns the closest of the four non-diagonal directions inside a rectangular tilemap, by angle.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Any(Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Checks if any directions are set.
            </summary>
            <returns>True if any direction is set. False otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Any(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Checks if any of the given directions are set, i.e. if the directions intersect.
            </summary>
            <param name="direction">The directions to check.</param>
            <param name="match">The directions to search for.</param>
            <returns>True if the directions intersect. False otherwise</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.All(Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Checks if all directions are set.
            </summary>
            <returns>True if all direction are set. False otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.All(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Checks if all of the given directions are set, i.e. if their intersection equals the parameter.
            </summary>
            <param name="direction">The directions to check.</param>
            <param name="match">The directions to search for.</param>
            <returns>True if all directions are included. False otherwise</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Union(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Returns the union of two sets of directions.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Except(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Excludes one set of directions from another.
            </summary>
            <returns>The original value, without the given directions.</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Intersect(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Returns the intersection of two sets of directions.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Enumerate(Bearded.Utilities.Tilemaps.Rectangular.Directions)">
            <summary>
            Enumerates all the set directions.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Includes(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Direction)">
            <summary>
            Checks if a specific direction is set.
            </summary>
            <returns>True if the given direction is set. False otherwise.</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.And(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Direction)">
            <summary>
            Sets a given direction.
            </summary>
            <returns>A union of the original value and the given direction.</returns>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Extensions.Except(Bearded.Utilities.Tilemaps.Rectangular.Directions,Bearded.Utilities.Tilemaps.Rectangular.Direction)">
            <summary>
            Un-sets a given direction.
            </summary>
            <returns>The original value, without the given direction.</returns>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Rectangular.Tile`1">
            <summary>
            Represents a reference to a specific tile of a rectangular tilemap.
            </summary>
            <typeparam name="TTileValue">The kind of data contained in the tilemap.</typeparam>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.#ctor(Bearded.Utilities.Tilemaps.Rectangular.Tilemap{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new tile reference.
            </summary>
            <param name="tilemap">The tilemap.</param>
            <param name="x">X location of tile.</param>
            <param name="y">Y location of tile.</param>
            <exception cref="T:System.ArgumentNullException">Throws if tilemap is null.</exception>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.X">
            <summary>
            X location of the tile.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.Y">
            <summary>
            Y location of the tile.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.Value">
            <summary>
            The data contained in the tile. Will throw if <see cref="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.IsValid"/> is false.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.IsValid">
            <summary>
            True if the tile is located within its tilemap. False otherwise.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.ValidNeighbours">
            <summary>
            Returns all eight tiles neighbouring this one, except those outside the tilemap.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.PossibleNeighbours">
            <summary>
            Returns all eight tiles neighbouring this one, whether or now they are outside the tilemap.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.Neighbour(Bearded.Utilities.Tilemaps.Rectangular.Direction)">
            <summary>
            Returns the tile neighbouring this one in a given direction.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.Equals(Bearded.Utilities.Tilemaps.Rectangular.Tile{`0})">
            <summary>
            Indicates whether this instance references the same tile as another one.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.op_Equality(Bearded.Utilities.Tilemaps.Rectangular.Tile{`0},Bearded.Utilities.Tilemaps.Rectangular.Tile{`0})">
            <summary>
            Indicates whether this instance references the same tile as another one.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tile`1.op_Inequality(Bearded.Utilities.Tilemaps.Rectangular.Tile{`0},Bearded.Utilities.Tilemaps.Rectangular.Tile{`0})">
            <summary>
            Indicates whether this instance references a different tile than another one.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1">
            <summary>
            A rectangular tilemap.
            </summary>
            <typeparam name="TTileValue">The kind of data contained in the tilemap.</typeparam>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new rectangular tilemap.
            </summary>
            <param name="width">The width of the tilemap.</param>
            <param name="height">The height of the tilemap.</param>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.Width">
            <summary>
            The width of the tilemap.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.Height">
            <summary>
            The height of the tilemap.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.Count">
            <summary>
            Gets the number of tiles in the tilemap.
            </summary>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the data of a tile by its coordinates.
            </summary>
            <param name="x">The X location of the tile.</param>
            <param name="y">The Y location of the tile.</param>
        </member>
        <member name="P:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.Item(Bearded.Utilities.Tilemaps.Rectangular.Tile{`0})">
            <summary>
            Gets or sets the data of a tile.
            </summary>
            <param name="tile">The tile.</param>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.IsValidTile(System.Int32,System.Int32)">
            <summary>
            Checks whether a specific tile location is inside the tilemap.
            </summary>
            <param name="x">The X location of the tile.</param>
            <param name="y">The Y location of the tile.</param>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.IsValidTile(Bearded.Utilities.Tilemaps.Rectangular.Tile{`0})">
            <summary>
            Checks whether a specific tile is located inside the tilemap.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates all tiles in the tilemap.
            </summary>
        </member>
        <member name="M:Bearded.Utilities.Tilemaps.Rectangular.Tilemap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates all tiles in the tilemap.
            </summary>
        </member>
        <member name="T:Bearded.Utilities.Tilemaps.Step">
            <summary>
            Represents a step taken in a Tilemap from one tile to another.
            </summary>
        </member>
    </members>
</doc>
